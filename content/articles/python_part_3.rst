:title: Python_Mutable
:date: 2017-05-28
:modified: 2017-05-28
:author: Artur K.
:category: Programming
:tags: python, linux
:slug: python_3
:status: draft

python tricks:
- enumerate
- zip
- x,y = y,x
- dict.get()
- for - else
- with
- try-except-else-finally


----

=======================================
**Ошибки во время выполнения программ**
=======================================

**Не работает функция print**

Пример кода:

.. code::

    print "Hello, world!"

Ошибка:

.. code::

    SyntaxError: invalid syntax

Решение:

Код написан для *python2*, а запускается в *python3*. Чтобы заработал в *python3*,
необходимо добавить скобки для функции *print*.


=======================
**Базовые типы данных**
=======================

Данные в языке Python представлены в форме объектов – либо встроенных,
предоставляемых языком Python, либо объектов, которые мы создаем с применением
конструкций языка Python или других инструментов, таких как библиотеки расширений,
написанные на языке C. Если говорить по сути, объекты – это области памяти со
значениями и ассоциированными с ними наборами операций.
На языке Python объекты можно разложить на такие составляющие, как модули,
инструкции, выражения и объекты; при этом:

1. Программы делятся на модули.
2. Модули содержат инструкции.
3. Инструкции состоят из выражений.
4. Выражения создают и обрабатывают объекты.

---------------
**Типы данных**
---------------

Краткий обзор встроенных типов данных в **Python** можно увидеть в таблице ниже,
в ней представлены не все типы данных, но часто используемые.

+-------------+---------------------------------------+
| Тип объекта | Пример литерала/создания              |
+=============+=======================================+
| Числа       | 1234, 3.1415, 3+4j, Decimal, Fraction |
+-------------+---------------------------------------+
| Строки      | ‘spam’, “guido’s” , b’a\x01c’         |
+-------------+---------------------------------------+
| Списки      | [1, [2, ‘three’], 4]                  |
+-------------+---------------------------------------+
| Словари     | {‘food’: ‘spam’, ‘taste’: ‘yum’}      |
+-------------+---------------------------------------+
| Кортежи     | (1,’spam’, 4, ‘U’)                    |
+-------------+---------------------------------------+
| Множества   | set(‘abc’), {‘a’, ‘b’, ‘c’}           |
+-------------+---------------------------------------+
| None Type   | None                                  |
+-------------+---------------------------------------+
| Логические  | True, False                           |
+-------------+---------------------------------------+

Все типы данных в **Python** относятся к одной из 2-ух категорий: изменяемые (*mutable*)
и неизменяемые (*unmutable*).
Из предопределенных неизменяемых типов данных **Python** - числа (*int*, *float*,
*complex*), строки (*str*), кортежи (*tuple*), к изменяемым типам относится - списки (*list*),
словари (*dict*), множества (*set*).

Сегодня рассмотрим подробно такие типы данных, как числа и строки.

~~~~~~~~~
**Числа**
~~~~~~~~~

Числа в *python3*: целые, вещественные, комплексные.
Работа с числами и операции над ними.

**Целые числа**

Числа в *python3* ничем не отличаются от обычных чисел. Они поддерживают набор самых
обычных математических операций:

.. figure:: /images/math-operation.png
    :height: 470px
    :width: 909px
    :scale: 100%
    :align: left
    :alt: Math Operation

Пример использования каждой операции и результат:

.. code::

    >>> 5 + 2
    7
    >>> 5 - 2
    3
    >>> 5 * 2
    10
    >>> 5 / 2
    2.5
    >>> 5 // 2
    2
    >>> 5 % 2
    1
    >>> -5
    -5
    >>> abs(-5)
    5
    >>> divmod(5, 2)
    (2, 1)
    >>> 5 ** 2
    25
    >>> pow(5, 2, 5)
    0

Над целыми числами также можно производить битовые операции.

.. figure:: /images/bits-operation.png
    :height: 262px
    :width: 911px
    :scale: 100%
    :align: left
    :alt: Math Operation

Пример использования каждой операции и результат:

.. code::

    >>> 7 | 8
    15
    >>> 7 & 8
    0
    >>> 7 ^ 8
    15
    >>> 7 << 1
    14
    >>> 7 >> 1
    3
    >>> ~7
    -8

Системы счисления.

Для систем с основанием 2, 8, 10 и 16 (двоичная, восьмиричная, десятичная,
шестнадцатиричная) в **Python** предусмотрены встроеные функции.

- **int([object], [основание системы счисления])** - преобразование к целому числу в десятичной системе счисления. По умолчанию система счисления десятичная, но можно задать любое основание от 2 до 36 включительно.
- **bin(x)** - преобразование целого числа в двоичную строку.
- **hex(х)** - преобразование целого числа в шестнадцатеричную строку.
- **oct(х)** - преобразование целого числа в восьмеричную строку.

Пример использования:

.. code::

    >>> int("1") # Переводим строку в число
    1
    >>> int("2.5") # Строка не является целым числом, будет возбуждено исключение:
    ValueError: invalid literal for int() with base 10: '2.5'

    >>> int(3.5) # Применённая к числу с плавающей точкой, отсекает дробную часть
    3

    >>> bin(17)
    '0b10001'

    >>> hex(17)
    '0x11'

    >>> oct(17)
    0o21

    >>> 0b1111
    15

    >>> int('10011', 2)
    19

    >>> int('0b10011', 2)
    19

**Вещественные числа**

Вещественные числа поддерживают те же операции, что и целые. Однако (из-за
представления чисел в компьютере) вещественные числа неточны, и это может
привести к ошибкам:

.. code::

    >>> 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1
    0.7999999999999999

Для высокой точности используют другие объекты (например Decimal и Fraction).

Дополнительные методы для вещественных чисел:

- float.as_integer_ratio() - пара целых чисел, чьё отношение равно этому числу.
- float.is_integer() - является ли значение целым числом.
- float.hex() - переводит float в hex (шестнадцатеричную систему счисления).
- float.fromhex(s) - float из шестнадцатеричной строки.

.. code::

    >>> 3.5.as_integer_ratio()
    (7, 2)
    >>> 12.0.is_integer()
    True
    >>> 12.1.is_integer()
    False
    >>> 1.4.hex()
    '0x1.6666666666666p+0'
    >>> float.fromhex('0x1.5000000000000p+3')
    10.5

**Комплексные числа**

В **Python** встроены также и комплексные числа.

.. code::

    >>> x = complex(1, 2)
    >>> print(x)
    (1+2j)
    >>> y = complex(3, 4)
    >>> print(y)
    (3+4j)
    >>> z = x + y
    >>> print(x)
    (1+2j)
    >>> print(z)
    (4+6j)
    >>> z = x * y
    >>> print(z)
    (-5+10j)
    >>> z = x / y
    >>> print(z)
    (0.44+0.08j)
    >>> print(x.conjugate())  # Сопряжённое число
    (1-2j)
    >>> print(x.imag)  # Мнимая часть
    2.0
    >>> print(x.real)  # Действительная часть
    1.0
    >>> print(x > y)  # Комплексные числа нельзя сравнить
    TypeError: unorderable types: complex() > complex()
    >>> print(x == y)  # Но можно проверить на равенство
    False
    >>> abs(3 + 4j)  # Модуль комплексного числа
    5.0
    >>> pow(3 + 4j, 2)  # Возведение в степень
    (-7+24j)

~~~~~~~~~~
**Строки**
~~~~~~~~~~

Строки в Python - упорядоченные последовательности символов, используемые
для хранения и представления текстовой информации, поэтому с помощью строк
можно работать со всем, что может быть представлено в текстовой форме.

Работа со строками в Python очень удобна. Существует несколько литералов строк,
которые мы сейчас и рассмотрим.

.. code::

    S = 'spam"s'
    S = "spam's"

Строки в апострофах и в кавычках - одно и то же. Причина наличия двух вариантов
в том, чтобы позволить вставлять в литералы строк символы кавычек или апострофов,
не используя экранирование.

**Экранированные последовательности**

Экранированные последовательности позволяют вставить символы, которые сложно ввести с клавиатуры.

.. figure:: /images/spec-symbols.png
    :height: 587px
    :width: 905px
    :scale: 100%
    :align: left
    :alt: Special Symbols

**"Сырые" строки**

Если перед открывающей кавычкой стоит символ 'r' (в любом регистре), то механизм
экранирования отключается.

.. code::

    S = r'C:\newt.txt'

Но, несмотря на назначение, "сырая" строка не может заканчиваться символом
обратного слэша. Пути решения:

.. code::

    S = r'\n\n\\'[:-1]

**Базовые операции со строками**

Конкатенация (сложение):

.. code::

    >>> S1 = 'spam'
    >>> S2 = 'eggs'
    >>> print(S1 + S2)
    'spameggs'

Дублирование строки:

.. code::

    >>> print('spam' * 3)
    spamspamspam

Длина строки (функция len):

.. code::

    >>> len('spam')
    4

Доступ по индексу:

.. code::


    >>> S = 'spam'
    >>> S[0]
    's'
    >>> S[2]
    'a'
    >>> S[-2]
    'a'

Как видно из примера, в Python возможен и доступ по отрицательному индексу,
при этом отсчет идет от конца строки.

Извлечение среза:
Оператор извлечения среза: [X:Y]. X – начало среза, а Y – окончание; символ с
номером Y в срез не входит. По умолчанию первый индекс равен 0, а второй - длине
строки.

.. code::

    >>> s = 'spameggs'
    >>> s[3:5]
    'me'
    >>> s[2:-2]
    'ameg'
    >>> s[:6]
    'spameg'
    >>> s[1:]
    'pameggs'
    >>> s[:]
    'spameggs'

Кроме того, можно задать шаг, с которым нужно извлекать срез.

.. code::

    >>> s[::-1]
    'sggemaps'
    >>> s[3:5:-1]
    ''
    >>> s[2::2]
    'aeg'
