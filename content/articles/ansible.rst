.. |date| date:: %Y-%m-%d

:title: Ansible
:date: 2017-01-30
:modified: |date|
:author: Artur K.
:category: Administration
:tags: ansible, python, linux
:slug: ansible
:status: draft

.. figure:: /images/ansible-header.jpg
    :height: 373px
    :width: 768px
    :scale: 65%
    :align: center
    :alt: Ansible

.. contents:: **Содержание**
   :depth: 3

----

============
**Введение**
============

Официальная документация по `Ansible <http://docs.ansible.com/ansible/index.html>`_

**Ansible** - система управления конфигурациями, написанная на Python, с
использованием декларативного языка разметки для описания конфигураций.
Используется для автоматизации настройки и развертывания программного обеспечения.

**Ansible** - берет на себя всю работу по приведению удаленных серверов в
необходимое состояние. Администратору необходимо лишь описать, как достичь
этого состояния с помощью так называемых сценариев (*playbooks*; это аналог
рецептов Chef). Такая технология позволяет очень быстро осуществлять
переконфигурирования системы: достаточно всего лишь добавить несколько новых
строк в сценарий.

-----------------
**Плюсы Ansible**
-----------------

Преимущества **Ansible** по сравнению с другими аналогичными решениями (*Puppet*,
*Chef* и *Salt*) заключается в следующем:

- на управляемые узлы не нужно устанавливать никакого дополнительного ПО, всё работает через *SSH* (в случае необходимости дополнительные модули можно взять из официального репозитория);
- код программы, написанный на Python, очень прост; при необходимости написание дополнительных модулей не составляет особого труда;
- язык, на котором пишутся сценарии, также предельно прост;
- низкий порог вхождения: обучиться работе с **Ansible** можно за очень короткое время;
- документация к продукту написана очень подробно и вместе с тем — просто и понятно; она регулярно обновляется;
- **Ansible** работает не только в режиме *push*, но и *pull*, как это делают большинство систем управления (*Puppet*, *Chef*);
- имеется возможность последовательного обновления состояния узлов (*rolling update*).

-------------------
**Основные задачи**
-------------------

Основные задачи, которые решает **Ansible**:

- **Управление конфигурациями.** Максимально быстрая и правильная настройка серверов до описанной конфигурации.
- **Провижнинг.** Управление процессом развертывания новых облачных серверов (например через *API*, с помощью *Docker* или *LXC*).
- **Развертывание.** Инсталляция и обновление ваших приложений без простоя наилучшим образом.
- **Оркестрация.** Координация компонентов вашей инфраструктуры для выполнения развертываний. Например проверка, что веб-сервер отключен от балансировщика нагрузки, до апгрейда ПО на сервере.
- **Мониторинг и уведомления.**
- **Логгирование.** Централизованный сбор логов.

=============
**Установка**
=============

Требования для установки **Ansible** минимальны. На машине с которой
производится управления должен быть установлен *Python* 2.6 или выше. На
управляемых узлах должен быть установлен только *Python* версии не ниже 2.4, но
он, как правило, по умолчанию включен в состав большинства дистрибутивов
*linux*-систем.

Так же могут потребоваться следующие модули *Python*, устанавливаемые через *pip*
или пакетный менеджер вашей операционной системы:

- paramiko;
- PyYAML;
- jinja2.

Установка **Ansible** в **Ubuntu**:

.. code::

    sudo add-apt-repository -y ppa:rquillo/ansible
    sudo apt-get update
    sudo apt-get install ansible -y

Установка **Ansible** в **CentOS 7**:

.. code::

    sudo rpm -iUvh http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm
    sudo yum -y update
    sudo yum -y install ansible

========================
**Как работает Ansible**
========================

Основная идея - наличие одного или нескольких управляющих серверов, из которых
можно отправлять команды или наборы последовательных инструкций (*playbooks*) на
удаленные сервера, подключаясь к ним по *SSH*.

.. figure:: /images/ansible-architecture.jpg
    :height: 505px
    :width: 1000px
    :scale: 85%
    :align: center
    :alt: Ansible Architecture

Файл **Host inventory** (инвентарный файл)содержит информацию об обсуживаемых
серверах, где команды будут исполнены. **Файл конфигурации Ansible** может быть
полезен для указания настроек вашего окружения.

**Наборы инструкций (playbooks)** состоят из одной или более задач, которые
описываются с помощью функциональности модуля ядра **Ansible** или сторонних
модулей, которые могут потребоваться в специфических ситуациях. Сами по себе
наборы инструкций - последовательные наборы команды, в которых могут быть
проверки условий: если условие не выполняется, определенные команды могут
пропускаться.

Так же можно использовать **Ansible API** для запуска скриптов. Если
скрипту-обертке (wrapper) может потребоваться запуск *playbook*, это можно сделать
через *API*. Сами *playbooks* описываются декларативно в формате *YAML*. **Ansible**
поддерживает сценарии развертывания новых облачных серверов и конфигурирования
их на основании ролей. Часть работы может быть проведена в локальном режиме на
управляющем сервере, а остальная - на созданном сервере после его первой загрузки.

=====================
**Настройка Ansible**
=====================

Файл конфигурации описывается в *INI*-формате. Можно переопределить часть или всю
конфигурацию в параметрах *playbook* или переменные окружения.
При исполнении команд **Ansible** проверяет наличие файла конфигурации в следующих расположениях:

#. Проверяется переменная окружения ANSIBLE_CONFIG, которая может указывать на файл конфигурации.
#. ./ansible.cfg - в текущей директории
#. ~/.ansible.cfg - в домашней директории
#. /etc/ansible/ansible.cfg

----------------------------------------
**Настройка через переменные окружения**
----------------------------------------

Большинство параметров конфигурации можно устанавливать через переменные
окружения, используя префикс **ANSIBLE_** перед названием параметра конфигурации
(большими буквами).

Например,
*export ANSIBLE_SUDO_USER=root*

После этого переменная *ANSIBLE_SUDO_USER* может использована в *playbook*.

---------------------------
**Настройка ansible.cfg**
---------------------------

Параметров конфигурации Ansible `множество <http://docs.ansible.com/ansible/intro_configuration.html>`_.

Некоторые из них:

- **hostfile:** Параметр указывает на путь к **inventory file**, в котором содержится список адресов хостов, к которым **Ansible** может подключиться. Например: **hostfile = /etc/ansible/hosts**
- **library:** Путь к директории, где хранятся модули Ansible. Например: **library = /usr/share/ansible**
- **forks:** Количество процессов, которые может породить Ansible. По-умолчанию установлено 5 процессов. Например: **forks = 5**
- **sudo_user:** Пользователь по умолчанию, от которого Ansible запускает команды на удаленных серверах. Например: **sudo_user = root**
- **remote_port:** Порт для соединения по *SSH* (по умолчанию 22). Например: **remote_port = 22**
- **host_key_checking:** Параметр позволяет отключить проверку SSH–ключа на хосте. По-умолчанию проверка выполняется. Например: **host_key_checking = False**
- **timeout:** Значение таймаута попытки подключения по *SSH*. Например: **timeout = 60**
- **log_path:** Путь для хранения файлов логов. По-умолчанию **Ansible** не хранит их совсем, но указав этот параметр можно активировать запись логов. Например: **log_path = /var/log/ansible.log**

------------------------------------
**Создание конфигурационного файла**
------------------------------------

Создаем директорию, для примера - *ansible* и переходим в неё:

.. code::

    mkdir ~/ansible
    cd ~/ansible

Также создаем папку для хранения модулей **Ansible** и папку для хранения логов:

.. code::

    mkdir ~/ansible/modules
    mkdir ~/ansible/logs

Создаем файл *ansible.cfg* со следующим содержимым:

.. code::

    [defaults]
    hostfile = ~/ansible/inventory
    sudo_user = root
    log_path = ~/ansible/logs/ansible.log

-----------------------
**Файл host inventory**
-----------------------

Дефолтное расположение файла - **/etc/ansible/hosts**, но оно может также быть
задано параметром окружения $ANSIBLE_HOSTS или параметром -i при запуске *ansible*
и *ansible-playbook*. Содержимое этого файла может выглядеть, например, так (в
квадратных скобках указаны имена групп управляемых узлов, ниже перечисляются
входящие в эти группы серверы):

.. code::

    [dbservers]
    one.example.com
    two.example.com
    three.example.com

    [dnsservers]
    rs1.example.com ansible_ssh_port=1234 ansible_ssh_host=192.168.1.10
    rs2.example.com
    ns[01:50].example.com

Помимо списка управляемых узлов, в файле *hosts* могут быть указаны и другие
сведения, необходимые для работы: номера портов для подключения по *SSH*, способ
подключения, пароль для подключения по *SSH*, имя пользователя, объединения групп
и т.п.

По структуре инвентарного файла: **Ansible** считает группой все, чья строка в
описании начинается с '[' и заканчивается ']'. Все что под этой строчкой и до
начала следующей группы - хосты. У группы могут быть дети - другие группы, которые
перечисляются после *[название группы:children]*.

.. code::

    [WEB:children]
    dbservers
    dnsservers

Во время деплоя, как правило, требуется не только установить какое-либо приложение,
но и настроить его в соответствии с определенными параметрами на основании
принадлежности к группе серверов или индивидуально. Загромождать файл hosts будет
не очень красиво, поэтому разработчики **Ansible** пошли следующим путём:

- файлы с переменными групп хранятся в директории *group_vars/имя_группы*;
- файлы с переменными хостов в директории *hosts_vars/имя_хоста*;
- файлы с переменными роли (о них речь пойдет ниже) в директории *имя_роли/vars/имя_задачи.yml*;

Помимо пользовательских переменных можно (и даже нужно) использовать факты,
собранные ansible перед выполнением сценариев и отдельных задач.

---------
**Факты**
---------

Перед внесением изменений **Ansible** подключается к управляемым узлам и
собирает информацию о них: о сетевых интерфейсах и их состоянии, об установленной
операционной системе и т.п. Он может делать это как с помощью собственного модуля,
так и с помощью инструментов *ohai* и *facter*, если они установлены (такая возможность
специально предусмотрена для пользователей, уже имеющих опыт работы с системами
удаленного управления конфигурациями: *ohai* и *facter* являются библиотеками фактов
для *Chef* и *Puppet*).

=========================
**Примеры простых задач**
=========================

С помощью **Ansible** можно одновременно выполнить одну задачу на целой группе
серверов. Отправим запрос на ping на серверы выбранной группы:

.. code::

    $ ansible dnsservers -m ping

    dns1.example.com | success >> {
    "changed": false,
    "ping": "pong"
    }

    dns2.example.com | success >> {
    "changed": false,
    "ping": "pong"
    }

Если модуль (ключ -m) не задан, то используется модуль `command <http://docs.ansible.com/ansible/command_module.html>`_.
Фактически, *ansible* можно использовать не только как систему управления конфигурацией,
но и как фреймворк для распределенного выполнения команд.

.. code::

    $ ansible -i hosts -a "ls -lah" all
    localhost | success | rc=0 >>
    total 12K
    drwxr-xr-x  5 brun staff  170 Apr  1 11:50 .
    drwxr-xr-x 91 brun staff 3.1K Apr  1 11:37 ..
    -rw-r--r--  1 brun staff  230 Apr  1 12:07 export.sh
    -rw-r--r--  1 brun staff   42 Apr  3 14:48 hosts
    -rw-r--r--  1 brun staff  376 Apr  1 12:49 playbook.yml

**Ansible** позволяет не только выполнять единичные задачи, но и писать сценарии,
которые необходимо выполнить на управляемых узлах. Рассмотрим структуру и
правила написания таких сценариев более подробно.

=============================
**Управление конфигурациями**
=============================

--------------
**Playbooks**
--------------

Исполнение *Playbooks* - одна из основных задач **Ansible**. *Playbooks* содержат
списки задач. Каждая задача внутри **Ansible** использует кусок кода-модуля.
*Playbooks* описываются в формате *YAML*.

--------
**YAML**
--------

Для **Ansible** практически каждый *YAML* файл начинается со списка. Каждый
элемент списка - список пар "ключ-значение", часто называемая словарем.

Все *YAML* файлы должны начинаться с "---". Это часть формата *YAML* и означает
начало документа.

Все члены списка должны находится с одинаковым отступом от начала строки, и
должны начинаться с пробела или "-". Комментарии начинаются с "#".

Например:

.. code::

    ---
    # Message
    - Hosting
    – Cloud

Словарь представлен в виде "ключ" (двоеточие и пробел) "значение":

.. code::

    ---
    # Message
    site: site_test
    blog: blog_test

При необходимости словари могут быть представлены в сокращенной форме:

.. code::

    ---
    # Comment
    {site: site_test, blog: blog_test}

Можно указать логические значение (истина/ложь) так:

.. code::

    ---
    need_access: no
    use_service: yes
    file_conf: TRUE
    read_value: True
    kill_process: false

Целиком *YAML*-файл будет выглядеть так:

.. code::

    ---
    # About blog
    site: site_test
    blog: blog_test
    must_read: True
    themes:
        - hosting
        - cloud
        - it
        - geeks
    brands:
        - blog_test
        - blog_test_cloud

Для переменных **Ansible** используют "{{ var }}". Если значение после двоеточия
начинается с "{", то *YAML* будет думать, что это словарь.

Для использования переменных нужно заключить скобки в кавычки:

.. code::

    word: "{{ variable }}"

-----------------------
**Написание playbooks**
-----------------------

*Playbooks* может состоять из списка обсуживаемых серверов, переменных
пользователя, задач, обработчиков (handlers) и т.д. Большинство настроек
конфигурации можно переопределить в *playbook*. Каждый *playbook* состоит из одного
или более действий (игры) в списке.

Цель игры - связать группу хостов с предопределенными ролями, представленными
как вызов задач **Ansible**.

В качестве примера рассматривается процесс установки *nginx*.
Создадим директорию, где будут хранится *playbooks*:

.. code::

    mkdir ~/ansible/playbooks

Создадим файл *setup_nginx.yml* в директории *playbooks* со следующим содержанием:

.. code::

    ---
    - hosts: dbservers
      tasks:

      - name: Install nginx package
        apt: name=nginx update_cache=yes
        sudo: yes

      - name: Starting nginx service
        service: name=nginx state=started
        sudo: yes

Рассмотрим подробнее содержимое:

- **hosts:** Список хостов или группа, на которой вы запускаете задачу. Это поле обязательное и каждый *playbook* должен иметь его, за исключением ролей. Если указана хост-группа, сначала **Ansible** ее ищет в *playbook*, а затем в файле *inventory*. Узнать, на каких хостах будет происходить работа, можно командой: *ansible-playbook --list-host*, где – путь к вашему *playbook (playbooks/setup_nginx.yml)*.
- **tasks:** Задачи. Все *playbooks* содержат задачи. Задача — это список действий, которые вы хотите выполнить. Поле задачи содержит имя задачи (справочная информация о задаче для пользователя *playbook*), модуль, который должен быть выполнен и аргументы, требуемые для модуля. Параметр «name» опциональный, но рекомендуемый.

==============
Модули Ansible
==============

Модуль можно написать на любом языке, он должен уметь принимать параметры на
вход и выдавать json ответ. Модули находятся `здесь <http://docs.ansible.com/ansible/list_of_all_modules.html>`_.

Как написать свой собственный модуль, можно прочитать в `документации <http://docs.ansible.com/ansible/dev_guide/developing_modules.html>`_.


В состав Ansible входит огромное количество модулей для развёртывания,
контроля и управления различными компонентами, которые можно условно разделить
на следующие группы (в скобках приведены названия некоторых продуктов и
сервисов):

- облачные ресурсы и виртуализация (Openstack, libvirt);
- базы данных (MySQL, Postgresql, Redis, Riak);
- файлы (шаблонизация, регулярные выражения, права доступа);
- мониторинг (Nagios, monit);
- оповещения о ходе выполнения сценария (Jabber, Irc, почта, MQTT, Hipchat);
- сеть и сетевая инфраструктура (Openstack, Arista);
- управление пакетами (apt, yum, rhn-channel, npm, pacman, pip, gem);
- система (LVM, Selinux, ZFS, cron, файловые системы, сервисы, модули ядра);
- работа с различными утилитами (git, hg).


====================
Сценарии (playbooks)
====================

Все сценарии в Ansible пишутся на YAML. Это - человекочитаемый формат
сериализованных данных, гораздо более простой, чем XML или JSON.

Чтобы выполнить сценарий используется команда ansible-playbook со следующим синтаксисом:

.. code::

    ansible-playbook <имя_файла_сценария.yml> ... [другие параметры]

В начале сценария обязательно должна присутствовать последовательность символов
"---" (так в YAML обозначается начало документа). Перед каждым новым разделом
списка ставится дефис (---):

.. code::

    - hosts: webservers

Основными параметрами/группами простого сценария являются:

- hosts - в нем указываются управляемые узлы или группы узлов, к которым нужно применить изменения;
- tasks - здесь описывается состояние, в которое необходимо привести управляемый узел, альтернативой этому могут служить роли;

Также в сценарии перед непосредственным описанием задач могут быть указаны следующие параметры или группы параметров:

- gather_facts - собирать или нет информацию о хостах перед выполнением задач, по умолчанию - да;
- vars - в нем указываются различные переменные, которые будут использованы при выполнении сценария;
- connection — можно указать метод соединения с хостами: pure ssh, paramiko, fireball, chroot, jail, local, accelerate (применимо также для выполнения отдельного модуля);
- sudo — после установления соединения выполнять задачу с привилегиями другого пользователя, по умолчанию другой пользователь — root;
- sudo_user — в сочетании с предыдущим параметром можно указать с привилегиями какого именно пользователя будет выполнена задача;
- vars_prompt — перед выполением плэйбука Ansible в интерактивном режиме может уточнить указанные в этом разделе параметры;
- remote_user (в предыдущих версиях — просто user) — имя пользователя для авторизации на удалённом хосте.

Пример сценария в yml-файле:

.. code::

    ---
    - hosts: all
    user: ubuntu

    tasks:
    - name: Update apt cache
      apt: update_cache=yes
      sudo: yes

    - name: Install required packages
      apt: name={{ item }}
      sudo: yes
      with_items:
        - nginx
        - postgresql

======================
**Список источников**
======================

- `Система управления Ansible <https://habrahabr.ru/company/selectel/blog/196620/>`_
- `Ansible - давайте попробуем <https://habrahabr.ru/company/express42/blog/254959/>`_
- `Администрирование Ansible <https://habrahabr.ru/post/195048/>`_
- `Автоматизируем и ускоряем процесс настройки облачных серверов с Ansible. Часть 1: Введение <https://habrahabr.ru/company/infobox/blog/249143/>`_
