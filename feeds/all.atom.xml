<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>IT Blog</title><link href="https://kutsevol.github.io/" rel="alternate"></link><link href="https://kutsevol.github.io/feeds/all.atom.xml" rel="self"></link><id>https://kutsevol.github.io/</id><updated>2017-03-02T00:00:00+02:00</updated><entry><title>Ansible Introduction. Part 3</title><link href="https://kutsevol.github.io/2017/03/02/ansible_end" rel="alternate"></link><published>2017-03-02T00:00:00+02:00</published><updated>2017-03-02T00:00:00+02:00</updated><author><name>Artur K.</name></author><id>tag:kutsevol.github.io,2017-03-02:/2017/03/02/ansible_end</id><summary type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="Ansible" src="/images/ansible-header-3.png" style="width: 621.0px; height: 385.2px;" /&gt;
&lt;/div&gt;
&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;&lt;strong&gt;Содержание&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id3" id="id9"&gt;&lt;strong&gt;Модули&lt;/strong&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#command" id="id10"&gt;&lt;strong&gt;Командный модуль command&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#raw" id="id11"&gt;&lt;strong&gt;Командный модуль raw&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#script" id="id12"&gt;&lt;strong&gt;Командный модуль script&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#shell" id="id13"&gt;&lt;strong&gt;Командный модуль shell&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#file" id="id14"&gt;&lt;strong&gt;Файловый модуль file&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#copy" id="id15"&gt;&lt;strong&gt;Файловый модуль copy&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#git" id="id16"&gt;&lt;strong&gt;Модуль системы управления версиями git&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id6" id="id17"&gt;&lt;strong&gt;Роли&lt;/strong&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id7" id="id18"&gt;&lt;strong&gt;Зависимости ролей&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id8" id="id19"&gt;&lt;strong&gt;Список источников&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;В &lt;a class="reference external" href="https://kutsevol.github.io/2017/02/20/ansible_cont"&gt;предыдущей статье&lt;/a&gt; рассмотрели как управлять
конфигурациями и как писать &lt;em&gt;playbook&lt;/em&gt;. В этой (последней) части рассмотрим модули
и как их …&lt;/p&gt;</summary><content type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="Ansible" src="/images/ansible-header-3.png" style="width: 621.0px; height: 385.2px;" /&gt;
&lt;/div&gt;
&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;&lt;strong&gt;Содержание&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id3" id="id9"&gt;&lt;strong&gt;Модули&lt;/strong&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#command" id="id10"&gt;&lt;strong&gt;Командный модуль command&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#raw" id="id11"&gt;&lt;strong&gt;Командный модуль raw&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#script" id="id12"&gt;&lt;strong&gt;Командный модуль script&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#shell" id="id13"&gt;&lt;strong&gt;Командный модуль shell&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#file" id="id14"&gt;&lt;strong&gt;Файловый модуль file&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#copy" id="id15"&gt;&lt;strong&gt;Файловый модуль copy&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#git" id="id16"&gt;&lt;strong&gt;Модуль системы управления версиями git&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id6" id="id17"&gt;&lt;strong&gt;Роли&lt;/strong&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id7" id="id18"&gt;&lt;strong&gt;Зависимости ролей&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id8" id="id19"&gt;&lt;strong&gt;Список источников&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;В &lt;a class="reference external" href="https://kutsevol.github.io/2017/02/20/ansible_cont"&gt;предыдущей статье&lt;/a&gt; рассмотрели как управлять
конфигурациями и как писать &lt;em&gt;playbook&lt;/em&gt;. В этой (последней) части рассмотрим модули
и как их применять, познакомимся с ролями.&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;&lt;strong&gt;Модули&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Модуль можно написать на любом языке, он должен уметь принимать параметры на
вход и выдавать json ответ. Модули находятся &lt;a class="reference external" href="http://docs.ansible.com/ansible/list_of_all_modules.html"&gt;здесь&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Как написать свой собственный модуль, можно прочитать в &lt;a class="reference external" href="http://docs.ansible.com/ansible/dev_guide/developing_modules.html"&gt;документации&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;В состав Ansible входит огромное количество модулей для развёртывания,
контроля и управления различными компонентами, которые можно условно разделить
на следующие группы (в скобках приведены названия некоторых продуктов и
сервисов):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;облачные ресурсы и виртуализация (Openstack, libvirt);&lt;/li&gt;
&lt;li&gt;базы данных (MySQL, Postgresql, Redis, Riak);&lt;/li&gt;
&lt;li&gt;файлы (шаблонизация, регулярные выражения, права доступа);&lt;/li&gt;
&lt;li&gt;мониторинг (Nagios, monit);&lt;/li&gt;
&lt;li&gt;оповещения о ходе выполнения сценария (Jabber, Irc, почта, MQTT, Hipchat);&lt;/li&gt;
&lt;li&gt;сеть и сетевая инфраструктура (Openstack, Arista);&lt;/li&gt;
&lt;li&gt;управление пакетами (apt, yum, rhn-channel, npm, pacman, pip, gem);&lt;/li&gt;
&lt;li&gt;система (LVM, Selinux, ZFS, cron, файловые системы, сервисы, модули ядра);&lt;/li&gt;
&lt;li&gt;работа с различными утилитами (git, hg).&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="command"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id10"&gt;&lt;strong&gt;Командный модуль command&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Модуль принимает имя команды и армументы. Переменные оболочки или операции (&amp;lt;,&amp;gt;,|,&amp;amp;)
не будут работать с модулем command, т.к. обрабатываются оболочкой.
Модуль command принимает следующие параметры:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;chdir&lt;/em&gt;: Используется для изменения текущей директории, в которой исполняется команда&lt;/li&gt;
&lt;li&gt;&lt;em&gt;creates&lt;/em&gt;: Создает файл&lt;/li&gt;
&lt;li&gt;&lt;em&gt;removes&lt;/em&gt;: Удаляет файл&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Простейшая задача перезагрузки сервера:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
- name: Reboot machine
    command: /sbin/shutdown -r now
    sudo: yes
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="raw"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id11"&gt;&lt;strong&gt;Командный модуль raw&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Этот модуль следует использовать, когда другие командные модули использовать не удается.
Это простой запуск удаленных команд серверу по &lt;em&gt;SSH&lt;/em&gt;. Данный модуль работает
даже на серверах без установленного &lt;em&gt;Python&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Пример установки пакета &lt;em&gt;vim&lt;/em&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
- name: Install vim
    raw: yum -y install vim-common
    sudo: yes
&lt;/pre&gt;
&lt;p&gt;По окончанию выполнения операции, можно будет увидеть, что пакет установлен, но
задача не будет помечена как &lt;em&gt;changed&lt;/em&gt;. Лучше не использовать &lt;em&gt;raw&lt;/em&gt; модуль когда возможно.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="script"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id12"&gt;&lt;strong&gt;Командный модуль script&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Этот модуль используется для копирования скрипта на удаленную машину и исполнения его.
Модуль поддерживает параметры &lt;em&gt;creates&lt;/em&gt; и &lt;em&gt;removes&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Для примера, напишем скрипт для просмотра количества директорий в &lt;em&gt;/etc&lt;/em&gt; и запустим
его на удаленных серверах (~/ansible/playbooks/scripts/&lt;strong&gt;list_number_of_directories.sh&lt;/strong&gt;)&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
#/bin/bash
ls -l /etc | egrep '^d' | wc -l
&lt;/pre&gt;
&lt;p&gt;Задача, использующая модуль script выглядит так:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
- name: List directories in /etc
    script: ~/ansible/playbooks/scripts/list_number_of_directories.sh /etc
    sudo: yes
&lt;/pre&gt;
&lt;p&gt;Путь к файлу скрипта задается относительно месторасположения файла, использующего
модуль &lt;em&gt;script&lt;/em&gt;. Например, если данная задача описана в файле задачи,
импортированном в &lt;em&gt;playbook&lt;/em&gt;, расположение скрипта задается относительно файла
задачи, а не &lt;em&gt;playbook&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="shell"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id13"&gt;&lt;strong&gt;Командный модуль shell&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Ключевое отличие модуля &lt;em&gt;shell&lt;/em&gt; от модуля &lt;em&gt;command&lt;/em&gt; в том, что он использует
&lt;strong&gt;/bin/sh&lt;/strong&gt; по умолчанию для запуска команд. Вы можете использовать переменные
оболочки и другие функции оболочки.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="file"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id14"&gt;&lt;strong&gt;Файловый модуль file&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Модуль &lt;em&gt;file&lt;/em&gt; позволяет вам изменять атрибуты файла. Можно создать файл, создать
или удалить директории рекурсивно, создать или удалить символическую ссылку.&lt;/p&gt;
&lt;p&gt;Проверим, что httpd.conf имеет правильные права владельца:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
- name: Ensure httpd conf has right permissions and owner/group
    file: path=/etc/httpd/conf/httpd.conf owner=root group=root mode=0644
    sudo: yes
&lt;/pre&gt;
&lt;p&gt;Так как скрипты &lt;strong&gt;Ansible&lt;/strong&gt; позволяют достичь нужного состояния и при перезапуске
скриптов - повторный запуск позволит убедиться и поправить при необходимости права
на доступ к файлам.&lt;/p&gt;
&lt;p&gt;Как создаются &lt;em&gt;симлинки&lt;/em&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
- name: Create a symlink in /tmp for httpd.conf
    file: src=/etc/httpd/conf/httpd.conf dest=/tmp/httpd.conf owner=root group=root state=link
    sudo: yes
&lt;/pre&gt;
&lt;p&gt;Создание директории рекурсивно:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
- name: Create recursive directories
    file: path=/tmp/dir1/dir2/dir3 owner=root group=root mode=0777
    sudo: yes
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="copy"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id15"&gt;&lt;strong&gt;Файловый модуль copy&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;С помощью модуля &lt;em&gt;copy&lt;/em&gt; можно копировать файлы на сервер.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
- name: Copy file remotely
    copy: src=test2.conf dest=/etc/test2.conf owner=root group=root mode=0644
    sudo: yes
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="git"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id16"&gt;&lt;strong&gt;Модуль системы управления версиями git&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;В &lt;strong&gt;Ansible&lt;/strong&gt; есть поддержка различных систем управления версиями (&lt;em&gt;svn&lt;/em&gt;, &lt;em&gt;bzr&lt;/em&gt;,
&lt;em&gt;hg&lt;/em&gt; и другие), но рассмотрим &lt;em&gt;git&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;Установка &lt;em&gt;git&lt;/em&gt; на сервер:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
- yum: name=git state=installed
  sudo: yes
&lt;/pre&gt;
&lt;p&gt;Получим репозиторий со скриптами из этих статей:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
- name: Checkout ansible–playground repository
    git: repo=https://github.com/trukhinyuri/ansible-playground.git dest=~/checkout
    sudo: yes
&lt;/pre&gt;
&lt;p&gt;До и после выполнения задачи считается &lt;em&gt;SHA&lt;/em&gt;, который позволяет понять, был ли
репозиторий обновлен.&lt;/p&gt;
&lt;p&gt;Если получаете файлы по &lt;em&gt;SSH&lt;/em&gt; - используйте параметры &lt;strong&gt;accept_key&lt;/strong&gt; и &lt;strong&gt;key_file&lt;/strong&gt;
для установки ключа для доступа к репозиторию. Если нужно использовать ключ
&lt;em&gt;accept_key=yes&lt;/em&gt;, &lt;em&gt;key_file&lt;/em&gt; - указывает на путь к ключу. Если ключ находится в
&lt;em&gt;~/.ssh&lt;/em&gt; - указывать &lt;em&gt;key_file&lt;/em&gt; не нужно.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id17"&gt;&lt;strong&gt;Роли&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ролью называется типовой набор переменных и задач, назначаемых для одного или
нескольких серверов. Если вам нужно применить к серверу или группе серверов
типовой набор операций, вам достаточно просто назначить ему роль. Предварительно
в проекте каталоге проекта должна быть создана соответствующая структура. В
сценариях роли назначаются следующим образом:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
---
- hosts: webservers
    roles:
     - common
     - web
     – db
&lt;/pre&gt;
&lt;p&gt;Файловая структура ролей будет выглядеть, примерно вот так:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
site.yml
webservers.yml
roles/
common/
 files/
 templates/
 tasks/
 handlers/
 vars/
 defaults/
 meta/
web/
 files/
 templates/
 tasks/
 handlers/
 vars/
 defaults/
 meta/
db/
 files/
 templates/
 tasks/
 handlers/
 vars/
 defaults/
 meta/
&lt;/pre&gt;
&lt;p&gt;Если какой-то директории в роли нет - она будет проигнорирована и &lt;em&gt;playbook&lt;/em&gt; будет
исполняться. Совсем не обязательно у вас должны быть все элементы и директории &lt;em&gt;playbook&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Правила, используемые для каждой роли:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Если &lt;strong&gt;roles/x/tasks/main.yml&lt;/strong&gt; существует, задачи будут добавлены в процесс исполнения &lt;em&gt;playbook&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Если &lt;strong&gt;roles/x/handlers/main.yml&lt;/strong&gt; существует, обработчики событий будут добавлены в процесс исполнения &lt;em&gt;playbook&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Если &lt;strong&gt;roles/x/vars/main.yml&lt;/strong&gt; существует, переменные будут добавлены в процесс исполнения &lt;em&gt;playbook&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Если &lt;strong&gt;roles/x/meta/mail.yml&lt;/strong&gt; существует, любые роли-зависимости будут добавлены в список ролей. (В meta можно указывать список ролей, которые должны быть применены до конкретной роли, чтобы она применилась корректно).&lt;/li&gt;
&lt;li&gt;Любая задача копирования может ссылаться на файл в &lt;strong&gt;roles/x/files&lt;/strong&gt; без указания абсолютного или относительного пути.&lt;/li&gt;
&lt;li&gt;Любая скриптовая задача может ссылаться на скрипты в &lt;strong&gt;roles/x/files&lt;/strong&gt; без указания абсолютного или относительного пути.&lt;/li&gt;
&lt;li&gt;Любая задача шаблонизации может ссылаться на &lt;strong&gt;roles/x/templates&lt;/strong&gt; без указания абсолютного или относительного пути.&lt;/li&gt;
&lt;li&gt;Любые импортируемые задачи могут ссылаться на файлы задач в директории &lt;strong&gt;roles/x/tasks&lt;/strong&gt; без указания абсолютного или относительного пути.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;В конфигурационном файле &lt;strong&gt;Аnsible&lt;/strong&gt; можно задать &lt;strong&gt;roles_path&lt;/strong&gt; (директорию с ролями).
Это может пригодиться, если у вас &lt;em&gt;playbook&lt;/em&gt; лежат в одном репозитории, а сами роли в другом.
Можно задавать сразу несколько путей к ролям через двоеточие:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
roles_path = /opt/mysite/roles:/opt/othersite/roles
&lt;/pre&gt;
&lt;p&gt;В роли можно передавать переменные или использовать условия:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
---
- hosts: experiments
    roles:
        – common
        – {role: web, dir: '/var/www', port: 80}
        – {role: repository, when: &amp;quot;ansible_os_family =='RedHat'&amp;quot;}
&lt;/pre&gt;
&lt;p&gt;С помощью тегов можно запускать помеченные части &lt;em&gt;playbook&lt;/em&gt;.
Использование тэгов выглядит так:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
tasks:
    - apt: name={{ item }} state=installed
      with_items:
         - httpd
         - htop
      tags:
         - packages

    - template: src=templates/src.j2 dest=/var/www/.htaccess
      tags:
         - configuration
&lt;/pre&gt;
&lt;p&gt;Можно запустить часть &lt;em&gt;playbook&lt;/em&gt; так:
&lt;strong&gt;ansible-playbook example.yml --tags «configuration,packages»&lt;/strong&gt; или пропустить исполнение части так:
&lt;strong&gt;ansible-playbook example.yml --skip-tags «notification»&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Тэги можно использовать и при указании ролей:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
---
- hosts: experiments
    roles:
    - { role: web, tags: [&amp;quot;apache&amp;quot;, &amp;quot;simple&amp;quot;] }
&lt;/pre&gt;
&lt;p&gt;Можно указать, какие задачи должны выполниться до роли и после:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
---
- hosts: experiments
    pre_tasks:
        - shell: echo 'hello, habr'
    roles:
        - { role: web }
    tasks:
        - shell: echo 'still busy'
    post_tasks:
        - shell: echo 'goodbye, habr'
&lt;/pre&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id18"&gt;&lt;strong&gt;Зависимости ролей&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Зависимости ролей позволяют автоматически исполнить зависимые роли при запуске
конкретных ролей, у которых зависимости есть. Зависимости хранятся в &lt;em&gt;roles/x/meta/main.yml&lt;/em&gt;.
Вместе с зависимыми ролями могут быть переданы параметры. Путь к ролям может быть
указан как в сокращенном виде, так и в полном. Также может быть использован
репозиторий системы управления версиями.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
---
dependencies:
    - { role: common, some_parameter: 3 }
    - { role: '/path/to/common/roles/foo', x: 1 }
    - { role: 'git+http://git.example.com/repos/role-foo,v1.1,foo' }
&lt;/pre&gt;
&lt;p&gt;Если в зависимостях указана одна и та же роль несколько раз - она запустится только
однажды. Если нужно несколько раз, можно в файле зависимостей попросить об этом явно.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id19"&gt;&lt;strong&gt;Список источников&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Официальная документация по &lt;a class="reference external" href="http://docs.ansible.com/ansible/index.html"&gt;Ansible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://habrahabr.ru/company/infobox/blog/252239/"&gt;Автоматизируем и ускоряем процесс настройки облачных серверов с Ansible. Часть 4: работаем с модулями&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://habrahabr.ru/company/infobox/blog/252461/"&gt;Автоматизируем и ускоряем процесс настройки облачных серверов с Ansible. Часть 5: local_action, условия, циклы и роли&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="ansible"></category><category term="python"></category><category term="linux"></category></entry><entry><title>Ansible Introduction. Part 2</title><link href="https://kutsevol.github.io/2017/02/20/ansible_cont" rel="alternate"></link><published>2017-02-20T00:00:00+02:00</published><updated>2017-02-21T00:00:00+02:00</updated><author><name>Artur K.</name></author><id>tag:kutsevol.github.io,2017-02-20:/2017/02/20/ansible_cont</id><summary type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="Ansible" src="/images/ansible-header-2.jpg" style="width: 600.0px; height: 281.25px;" /&gt;
&lt;/div&gt;
&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;&lt;strong&gt;Содержание&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id3" id="id16"&gt;&lt;strong&gt;Управление конфигурациями&lt;/strong&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#playbooks" id="id17"&gt;&lt;strong&gt;Playbooks&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#yaml" id="id18"&gt;&lt;strong&gt;YAML&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id4" id="id19"&gt;&lt;strong&gt;Написание playbooks&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id5" id="id20"&gt;&lt;strong&gt;Шаблонизация&lt;/strong&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id6" id="id21"&gt;&lt;strong&gt;Стандартные циклы&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id7" id="id22"&gt;&lt;strong&gt;Вложенные циклы&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id8" id="id23"&gt;&lt;strong&gt;Циклы по подэлементам&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#handlers" id="id24"&gt;&lt;strong&gt;Обработчик событий (Handlers)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id9" id="id25"&gt;&lt;strong&gt;Контроль выполнения&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id10" id="id26"&gt;&lt;strong&gt;Делегирование задачи другому хосту&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id11" id="id27"&gt;&lt;strong&gt;Отладка&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#playbook" id="id28"&gt;&lt;strong&gt;Повторное использование playbook&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id12" id="id29"&gt;&lt;strong&gt;Список источников&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;В &lt;a class="reference external" href="https://kutsevol.github.io/2017/02/10/ansible_intro"&gt;предыдущей статье&lt;/a&gt; рассмотрели основные
задачи и принципы работы, как работает &lt;strong&gt;Ansible&lt;/strong&gt; его установка и настройка, а
также рассмотрели примеры …&lt;/p&gt;</summary><content type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="Ansible" src="/images/ansible-header-2.jpg" style="width: 600.0px; height: 281.25px;" /&gt;
&lt;/div&gt;
&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;&lt;strong&gt;Содержание&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id3" id="id16"&gt;&lt;strong&gt;Управление конфигурациями&lt;/strong&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#playbooks" id="id17"&gt;&lt;strong&gt;Playbooks&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#yaml" id="id18"&gt;&lt;strong&gt;YAML&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id4" id="id19"&gt;&lt;strong&gt;Написание playbooks&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id5" id="id20"&gt;&lt;strong&gt;Шаблонизация&lt;/strong&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id6" id="id21"&gt;&lt;strong&gt;Стандартные циклы&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id7" id="id22"&gt;&lt;strong&gt;Вложенные циклы&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id8" id="id23"&gt;&lt;strong&gt;Циклы по подэлементам&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#handlers" id="id24"&gt;&lt;strong&gt;Обработчик событий (Handlers)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id9" id="id25"&gt;&lt;strong&gt;Контроль выполнения&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id10" id="id26"&gt;&lt;strong&gt;Делегирование задачи другому хосту&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id11" id="id27"&gt;&lt;strong&gt;Отладка&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#playbook" id="id28"&gt;&lt;strong&gt;Повторное использование playbook&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id12" id="id29"&gt;&lt;strong&gt;Список источников&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;В &lt;a class="reference external" href="https://kutsevol.github.io/2017/02/10/ansible_intro"&gt;предыдущей статье&lt;/a&gt; рассмотрели основные
задачи и принципы работы, как работает &lt;strong&gt;Ansible&lt;/strong&gt; его установка и настройка, а
также рассмотрели примеры простых задач, которые можно решать с помощью него.
В этой части рассмотрим как управлять конфигурациями, как написать &lt;em&gt;playbook&lt;/em&gt; и
все что с ними связано (шаблоны, циклы, дебаг и т.д.)&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id16"&gt;&lt;strong&gt;Управление конфигурациями&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="playbooks"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id17"&gt;&lt;strong&gt;Playbooks&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Исполнение &lt;em&gt;Playbooks&lt;/em&gt; - одна из основных задач &lt;strong&gt;Ansible&lt;/strong&gt;. &lt;em&gt;Playbooks&lt;/em&gt; содержат
списки задач. Каждая задача внутри &lt;strong&gt;Ansible&lt;/strong&gt; использует кусок кода-модуля.
&lt;em&gt;Playbooks&lt;/em&gt; описываются в формате &lt;em&gt;YAML&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Чтобы выполнить сценарий используется команда ansible-playbook со следующим
синтаксисом:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
ansible-playbook &amp;lt;имя_файла_сценария.yml&amp;gt; ... [другие параметры]
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="yaml"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id18"&gt;&lt;strong&gt;YAML&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Для &lt;strong&gt;Ansible&lt;/strong&gt; практически каждый &lt;em&gt;YAML&lt;/em&gt; файл начинается со списка. Каждый
элемент списка - список пар &amp;quot;ключ-значение&amp;quot;, часто называемая словарем.&lt;/p&gt;
&lt;p&gt;Все &lt;em&gt;YAML&lt;/em&gt; файлы должны начинаться с &amp;quot;---&amp;quot;. Это часть формата &lt;em&gt;YAML&lt;/em&gt; и означает
начало документа.&lt;/p&gt;
&lt;p&gt;Все члены списка должны находится с одинаковым отступом от начала строки, и
должны начинаться с пробела или &amp;quot;-&amp;quot;. Комментарии начинаются с &amp;quot;#&amp;quot;.&lt;/p&gt;
&lt;p&gt;Например:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
---
# Message
- Hosting
– Cloud
&lt;/pre&gt;
&lt;p&gt;Словарь представлен в виде &amp;quot;ключ&amp;quot; (двоеточие и пробел) &amp;quot;значение&amp;quot;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
---
# Message
site: site_test
blog: blog_test
&lt;/pre&gt;
&lt;p&gt;При необходимости словари могут быть представлены в сокращенной форме:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
---
# Comment
{site: site_test, blog: blog_test}
&lt;/pre&gt;
&lt;p&gt;Можно указать логические значение (истина/ложь) так:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
---
need_access: no
use_service: yes
file_conf: TRUE
read_value: True
kill_process: false
&lt;/pre&gt;
&lt;p&gt;Целиком &lt;em&gt;YAML&lt;/em&gt;-файл будет выглядеть так:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
---
# About blog
site: site_test
blog: blog_test
must_read: True
themes:
    - hosting
    - cloud
    - it
    - geeks
brands:
    - blog_test
    - blog_test_cloud
&lt;/pre&gt;
&lt;p&gt;Для переменных &lt;strong&gt;Ansible&lt;/strong&gt; используют &amp;quot;{{ var }}&amp;quot;. Если значение после двоеточия
начинается с &amp;quot;{&amp;quot;, то &lt;em&gt;YAML&lt;/em&gt; будет думать, что это словарь.&lt;/p&gt;
&lt;p&gt;Для использования переменных нужно заключить скобки в кавычки:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
word: &amp;quot;{{ variable }}&amp;quot;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id19"&gt;&lt;strong&gt;Написание playbooks&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Playbooks&lt;/em&gt; может состоять из списка обсуживаемых серверов, переменных
пользователя, задач, обработчиков (handlers) и т.д. Большинство настроек
конфигурации можно переопределить в &lt;em&gt;playbook&lt;/em&gt;. Каждый &lt;em&gt;playbook&lt;/em&gt; состоит из одного
или более действий (игры) в списке.&lt;/p&gt;
&lt;p&gt;Цель игры - связать группу хостов с предопределенными ролями, представленными
как вызов задач &lt;strong&gt;Ansible&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;В качестве примера рассматривается процесс установки &lt;em&gt;nginx&lt;/em&gt;.
Создадим директорию, где будут хранится &lt;em&gt;playbooks&lt;/em&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
mkdir ~/ansible/playbooks
&lt;/pre&gt;
&lt;p&gt;Создадим файл &lt;em&gt;setup_nginx.yml&lt;/em&gt; в директории &lt;em&gt;playbooks&lt;/em&gt; со следующим содержанием:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
---
- hosts: dbservers
  tasks:

  - name: Install nginx package
    apt: name=nginx update_cache=yes
    sudo: yes

  - name: Starting nginx service
    service: name=nginx state=started
    sudo: yes
&lt;/pre&gt;
&lt;p&gt;Рассмотрим подробнее содержимое:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;hosts:&lt;/strong&gt; Список хостов или группа, на которой вы запускаете задачу. Это поле обязательное и каждый &lt;em&gt;playbook&lt;/em&gt; должен иметь его, за исключением ролей. Если указана хост-группа, сначала &lt;strong&gt;Ansible&lt;/strong&gt; ее ищет в &lt;em&gt;playbook&lt;/em&gt;, а затем в файле &lt;em&gt;inventory&lt;/em&gt;. Узнать, на каких хостах будет происходить работа, можно командой: &lt;em&gt;ansible-playbook --list-host&lt;/em&gt;, где – путь к вашему &lt;em&gt;playbook (playbooks/setup_nginx.yml)&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tasks:&lt;/strong&gt; Задачи. Все &lt;em&gt;playbooks&lt;/em&gt; содержат задачи. Задача — это список действий, которые вы хотите выполнить. Поле задачи содержит имя задачи (справочная информация о задаче для пользователя &lt;em&gt;playbook&lt;/em&gt;), модуль, который должен быть выполнен и аргументы, требуемые для модуля. Параметр «name» опциональный, но рекомендуемый.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Также в сценарии перед непосредственным описанием задачи могут указыватся
следующие параметры или группы параметров:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;gather_facts&lt;/strong&gt; - собирать или нет информацию о хостах перед выполнением задач, по умолчанию - да;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vars&lt;/strong&gt; - в нем указываются различные переменные, которые будут использованы при выполнении сценария;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;connection&lt;/strong&gt; - можно указать метод соединения с хостами: &lt;em&gt;pure ssh&lt;/em&gt;, &lt;em&gt;paramiko&lt;/em&gt;, &lt;em&gt;fireball&lt;/em&gt;, &lt;em&gt;chroot&lt;/em&gt;, &lt;em&gt;jail&lt;/em&gt;, &lt;em&gt;local&lt;/em&gt;, &lt;em&gt;accelerate&lt;/em&gt; (применимо также для выполнения отдельного модуля);&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sudo&lt;/strong&gt; - после установления соединения выполнять задачу с привелегиями другого пользователя, по умолчанию другой пользователь - &lt;em&gt;root&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sudo_user&lt;/strong&gt; - в сочетании с предыдущим параметром можно указать с привелегиями какого именно пользователя будет выполнена задача;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vars_prompt&lt;/strong&gt; - перед выполнением &lt;em&gt;playbook'a&lt;/em&gt; &lt;strong&gt;Ansible&lt;/strong&gt; в интерактивном режиме, может уточнить указанные в этом разделе параметры;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;remote_user&lt;/strong&gt; (в предыдущих версиях - просто &lt;em&gt;user&lt;/em&gt;) - имя пользователя для авторизации на удаленном хосте.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id20"&gt;&lt;strong&gt;Шаблонизация&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;В &lt;strong&gt;Ansible&lt;/strong&gt; используется шаблонизатор &lt;a class="reference external" href="http://jinja.pocoo.org/"&gt;Jinja2&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="id6"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id21"&gt;&lt;strong&gt;Стандартные циклы&lt;/strong&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Пример сценария в yml-файле:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
---
- hosts: all
user: ubuntu

tasks:
- name: Update apt cache
  apt: update_cache=yes
  sudo: yes

- name: Install required packages
  apt: name={{ item }}
  sudo: yes
  with_items:
    - nginx
    - postgresql
&lt;/pre&gt;
&lt;p&gt;Если необходимо установить несколько пакетов при этом с одинаковыми настройками
- используется шаблонизатор и параметр &lt;em&gt;with_items&lt;/em&gt;. На каждой итерации &lt;em&gt;item&lt;/em&gt; принимает
следующее значение, указанное в &lt;em&gt;with_items&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Задача запускается один раз, но &lt;em&gt;apt&lt;/em&gt; вызывается для всех указанных пакетов.
Можно так же использовать &lt;em&gt;with_items&lt;/em&gt; как словарь вместо строк:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
with_items:
– {name: 'httpd', state: 'latest'}
– {name: 'htop', state: 'absent'}
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id22"&gt;&lt;strong&gt;Вложенные циклы&lt;/strong&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Вложенные циклы полезны, когда необходимо выполнить несколько операций над
одним и тем же ресурсом. Например, если вы хотите предоставить доступ ко множеству
баз данных для пользователей MySQL.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
---
- hosts: experiments
    remote_user: root
    tasks:
    - name: give users access to multiple databases
        mysql_user: name={{ item[0] }} priv={{ item[1] }}.*:ALL
        append_privs=yes password=pass login_user=root login_password=root
    with_nested:
    - ['alexey', 'alexander']
    - ['clientdb', 'providerdb']
&lt;/pre&gt;
&lt;p&gt;В приведенном примере используется модуль mysql_user для установки прав на базы данных и
используем вложенные циклы с двумя спискми: список пользователей и список базы данных.
&lt;strong&gt;Ansible&lt;/strong&gt; запустит модуль &lt;em&gt;mysql_user&lt;/em&gt; для пользователей &lt;em&gt;alexey&lt;/em&gt;, даст права
на все указанные во втором списке базы данных, затем запустит для пользователей
&lt;em&gt;alexander&lt;/em&gt; и так же даст права.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id23"&gt;&lt;strong&gt;Циклы по подэлементам&lt;/strong&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;В предыдущем примере назначали все указанные БД всем указанным пользователям.
Но если для каждого пользователя нужно назначить свой специфический набор баз данных?
Для это нам нужны циклы по подэлементам.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
---
- hosts: experiments
    remote_user: root
    vars:
    users:
        - name: alexey
          database:
          - clientdb
          - providerdb
        - name: alexander
          database:
          - providerdb
  tasks:
    – name: give users access to multiple databases
    mysql_user: name={{ item.0.name }} priv={{ item.1 }}.*:ALL
    append_privs=yes password=pass login_user=root login_password=root
    with_subelements:
    - users
    - database
&lt;/pre&gt;
&lt;p&gt;Cоздали словари, которые состоят из имен пользователей и имен баз данных.
Вместо добавления данных пользователей в &lt;em&gt;playbook&lt;/em&gt; можно вынести их в отдельный
файл переменных и включить в &lt;em&gt;playbook&lt;/em&gt;. &lt;strong&gt;Ansible&lt;/strong&gt; пройдется по словарю используя
переменную &lt;em&gt;item&lt;/em&gt;. &lt;strong&gt;Ansible&lt;/strong&gt; назначает численные значения ключам, представленным
конструкцией &lt;em&gt;with_subelements&lt;/em&gt;, начиная с 0. В словаре 0 имя — пара «ключ-значения»,
поэтому для обращения по имени пользователя мы используем item.0.name.
&lt;em&gt;Dictionary&lt;/em&gt; — простой список, поэтому для обращения используем item.1.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="handlers"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id24"&gt;&lt;strong&gt;Обработчик событий (Handlers)&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Ansible&lt;/strong&gt; не просто выполняет задачи в указанном порядке, но и проверяет их
состояние на наличие изменений. Если при выполнении сценария требовалось,
например, добавить строку в конфигурационный файл, и в результате выполнения
он изменился (необходимой строки действительно не было), то &lt;strong&gt;Ansible&lt;/strong&gt; может
выполнить специальную задачу, описанную как обработчик события (&lt;em&gt;handler&lt;/em&gt;).
Если при выполнении строка уже была в конфигурационном файле, то обработчик
выполнен не будет. Обработчики событий описываются в конце сценария; в описании
задачи они указываются через параметр &lt;em&gt;notify&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Пример:&lt;/p&gt;
&lt;pre class="code yaml literal-block"&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;hosts&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;webservers&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;vars&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;max_clients&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;200&lt;/span&gt;

&lt;span class="l-Scalar-Plain"&gt;tasks&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# сгенерируем файл конфигурации на основе шаблона&lt;/span&gt;
  &lt;span class="c1"&gt;# и укажем, что требуется выполнить задачу “restart apache”&lt;/span&gt;
  &lt;span class="c1"&gt;# если файл изменился&lt;/span&gt;
&lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;write the apache config file&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;template&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;src=/srv/httpd.j2 dest=/etc/httpd.conf&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;notify&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;restart apache&lt;/span&gt;

&lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;ensure apache is running&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;service&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name=httpd state=started&lt;/span&gt;

&lt;span class="c1"&gt;# раздел описания обработчиков&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;handlers&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;restart apache&lt;/span&gt;
    &lt;span class="c1"&gt;# используем модуль service для перезапуска веб-сервера&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;service&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name=httpd state=restarted&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id25"&gt;&lt;strong&gt;Контроль выполнения&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Допустим, что при выполнении сценария нам нужно проверять определённые
переменные или состояния и, в зависимости от них, выполнять или не выполнять
какие-либо задачи. Для этого можно использовать оператор &lt;em&gt;“when”&lt;/em&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
tasks:
  # сохраняем файл шаблона и сохраняем результат задачи
  # в переменную last_result
- template: src=/templates/foo.j2 dest=/etc/foo.conf
  register: last_result
  # проверяем переменную last_result.changed и если она имеет
  # значение true - задача будет выполнена, иначе - будет пропущена
- command: echo 'the file has changed'
  when: last_result.changed
&lt;/pre&gt;
&lt;pre class="code literal-block"&gt;
---
- hosts: experiments
    remote_user: root
    tasks:

    - name: Testing user sudo privilege
        command: /usr/bin/sudo -v
        register: sudo_response
        ignore_errors: yes

    - name: Stop if Users doesn`t have sudo privilege
        fail: msg=&amp;quot;User doesn`t have sudo privilege&amp;quot;
        when: sudo_response.rc == 1
&lt;/pre&gt;
&lt;p&gt;В примере выше запускаем команду на сервере &lt;em&gt;/usr/bin/sudo -v&lt;/em&gt; и сохранили ее вывод
в переменную через &lt;em&gt;register&lt;/em&gt;. В переменной был захвачен вывод &lt;em&gt;stdout&lt;/em&gt; и &lt;em&gt;stderr&lt;/em&gt;
(rc, return code). Во второй задаче проверяем &lt;em&gt;return code&lt;/em&gt; переменной и если ошибка возникла -
должны завершить исполнение &lt;em&gt;playbook&lt;/em&gt; c выводом сообщения.&lt;/p&gt;
&lt;p&gt;Для сравнения в условиях в &lt;strong&gt;Ansible&lt;/strong&gt; можно использовать &lt;strong&gt;==&lt;/strong&gt; (равно), &lt;strong&gt;!=&lt;/strong&gt; (не равно),
&lt;strong&gt;&amp;gt;&lt;/strong&gt; (больше), &lt;strong&gt;&amp;lt;&lt;/strong&gt; (меньше), &lt;strong&gt;&amp;gt;=&lt;/strong&gt; (больше равно), &lt;strong&gt;&amp;lt;=&lt;/strong&gt; (меньше равно).&lt;/p&gt;
&lt;p&gt;Если необходимо проверить, есть ли в переменной символ или строка, используйте операторы &lt;strong&gt;in&lt;/strong&gt; и &lt;strong&gt;not&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
- name: Querying rpm list for httpd package
    shell: rpm -qa | grep httpd
    register: httpd_rpm

- name: Check if httpd rpm is installed on the remote host
    debug: msg=&amp;quot;httpd is installed on the remote host&amp;quot;
    when: &amp;quot;'httpd-2.2.27–1.2.x86_64' in httpd_rpm.stdout&amp;quot;

– name: Check if httpd rpm is not installed on the remote host
    debug: msg=&amp;quot;httpd is not installed on the remote host&amp;quot;
    when: not 'httpd-2.2.27.1.2.x86_64' in httpd_rpm.stdout
&lt;/pre&gt;
&lt;p&gt;Можно задавать несколько условий, используя операторы &lt;strong&gt;and&lt;/strong&gt; (и) и &lt;strong&gt;or&lt;/strong&gt; (или).&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
– name: Check if httpd rpm is installed on the remote host
    debug: msg=&amp;quot;httpd is installed on the remote host&amp;quot;
    when: &amp;quot;'httpd-2.2.27–1.2.x86_64' in httpd_rpm.stdout and
    'httpd-tools-2.2.27–1.2.x86–64' in httpd_rpm.stdout&amp;quot;
&lt;/pre&gt;
&lt;p&gt;Также можно проверить логическое значение переменной. Давайте сделаем &lt;em&gt;backup&lt;/em&gt;,
если в переменной backup установлено &lt;em&gt;true&lt;/em&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
– name: Rsync
    shell: /usr/bin/rsync -ra /home /backup/{{ inventory_hostname }}
    sudo: yes
    when: backup
&lt;/pre&gt;
&lt;p&gt;Ansible позволяет в условии использовать информацию о том, была ли уже определена
переменная. Для этого используйте &lt;em&gt;when&lt;/em&gt;: &lt;em&gt;var is not define&lt;/em&gt; (где
&lt;em&gt;var&lt;/em&gt; — имя переменной, &lt;em&gt;is not define&lt;/em&gt; – еще не была определена, &lt;em&gt;is defined&lt;/em&gt; – уже была определена).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id26"&gt;&lt;strong&gt;Делегирование задачи другому хосту&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Иногда требуется выполнить задачу на определённом узле, но в контексте другого
узла. Например, во время обновления узла может возникнуть необходимость отключить
для него мониторинг, находящийся на отдельном сервере. Для этого используется
управляющая директива &lt;em&gt;delegate_to&lt;/em&gt;. Приведём пример:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
- name: disable nagios alerts for this host webserver service
nagios: action=disable_alerts host={{inventory_hostname}} services=dnsserver
delegate_to: mon_host.example.com
&lt;/pre&gt;
&lt;p&gt;Результатом выполнения этой задачи будет отключение сообщений для сервиса
dnsserver в Nagios.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id27"&gt;&lt;strong&gt;Отладка&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;При запуске &lt;em&gt;playbook&lt;/em&gt; можно увидеть примерно следующий вывод в терминале:&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Ansible playbook" src="/images/ansible-playbook.jpg" style="width: 750.0px; height: 627.0px;" /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Gathering facts&lt;/strong&gt; - это первая задача по умолчанию в любом playbook. Задача
собирает полезные метаданные о серверах в форме переменных, которые могут
использоваться в &lt;em&gt;playbook&lt;/em&gt; в дальнейшем. Например, такими переменными могут быть
&lt;em&gt;ip-адрес&lt;/em&gt;, архитектура OC и имя хоста.&lt;/p&gt;
&lt;p&gt;Можно посмотреть эти переменные, используя команду:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
ansible -m setup experiments
&lt;/pre&gt;
&lt;p&gt;где experiments - название секции в вашем &lt;em&gt;inventory&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Или записать все в файл:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
ansible -m setup experiments &amp;gt;&amp;gt; facts
&lt;/pre&gt;
&lt;p&gt;Ниже в выводе указаны задачи &lt;strong&gt;TASK&lt;/strong&gt;, согласно ходу выполнения plyabook:
установка nginx, запуск сервиса.&lt;/p&gt;
&lt;p&gt;Одно из ключевых свойств систем &lt;strong&gt;Ansible&lt;/strong&gt;: &lt;strong&gt;Идемпотентность&lt;/strong&gt; (операция, которая
если применяется к любому значению несколько раз - всегда получается то же значение,
как и при однократном применении). Большинство систем управления конфигурациями
следуют этому принципу и применяют его на инфраструктуру.&lt;/p&gt;
&lt;p&gt;Секция &lt;strong&gt;PLAY RECAP&lt;/strong&gt; ниже в выводе. Параметр &lt;strong&gt;changed&lt;/strong&gt; показывает, сколько раз
в задачах менялось состояние сервера. &lt;strong&gt;ok&lt;/strong&gt; - количество исполняемых задач вместе
с &lt;strong&gt;Gathering facts&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Для исправления ошибок при исполнении &lt;em&gt;playbook&lt;/em&gt; - есть 3 уровня вывода отладочной
информации (verbose):&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;-v&lt;/strong&gt; вывод базовой информации:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
ansible-playbook playbooks/setup_nginx.yml -v
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;-vv&lt;/strong&gt; более подробный вывод:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
ansible-playbook playbooks/setup_nginx.yml -vv
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;-vvv&lt;/strong&gt; самый подробный вывод. В этом выводе указаны SSH-команды, которые
&lt;strong&gt;Ansible&lt;/strong&gt; использует для создания временных файлов на удаленном хосте для запуска
скрипта удаленно.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
ansible-playbook playbooks/setup_nginx.yml -vvv
&lt;/pre&gt;
&lt;p&gt;Можно выводить любые переменные &lt;strong&gt;Ansible&lt;/strong&gt; для отладки. Для этого необходимо добавить
в &lt;em&gt;playbok&lt;/em&gt; следующую секцию:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
- name: Debug
    debug: msg={{ ansible_distribution }}
&lt;/pre&gt;
&lt;p&gt;При запуске &lt;em&gt;playbook&lt;/em&gt; вы увидите вывод этой переменной. Каждая переменная
&lt;strong&gt;Ansible&lt;/strong&gt; начинается с префикса &lt;strong&gt;ansible_&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Ansible debug variable" src="/images/ansible-debug-variable.jpg" style="width: 750.0px; height: 360.0px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Для того чтобы посмотреть на все задачи, выполняющиеся в &lt;em&gt;playbook&lt;/em&gt;. Она
особенно полезна, когда есть несколько &lt;em&gt;playbook&lt;/em&gt;, исполняющих другие &lt;em&gt;playbook&lt;/em&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
ansible-playbook playbooks/setup_nginx.yml --list-tasks
&lt;/pre&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Ansible list tasks" src="/images/ansible-list-tasks.jpg" style="width: 750.0px; height: 250.5px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Можно исполнить конкретную задачу из &lt;em&gt;playbook&lt;/em&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
ansible-playbook playbooks/setup_nginx.yml --start-at-task=&amp;quot;Debug&amp;quot;
&lt;/pre&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Ansible run once task" src="/images/ansible-run-once-task.jpg" style="width: 750.0px; height: 427.5px;" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="playbook"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id28"&gt;&lt;strong&gt;Повторное использование playbook&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Если задача или набор задач часто используется - есть смысл оформить ее в виде
отдельного файла, который можно будет использовать в других &lt;em&gt;playbook&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Создадим директорию для повторно используемых задач:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
mkdir ~/ansible/playbooks/tasks
&lt;/pre&gt;
&lt;p&gt;Создадим задачу обновления ОС в файле ~/ansible/playbooks/tasks/&lt;strong&gt;os_update.yml&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
---
# Update and upgrade apt-based linux
- name: Update and upgrade apt-based Linux
    apt: update-cache=yes state=latest
    sudo: yes
&lt;/pre&gt;
&lt;p&gt;Теперь можно включить секцию обновления ОС в ~/ansible/playbooks/&lt;strong&gt;setup_nginx.yml&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
---
- hosts: experiments
    remote_user: root
    tasks:

    - include: tasks/os_update.yml

    - name: Install nginx package
        apt: name=nginx update_cache=yes
        sudo: yes

    - name: Starting nginx service
        service: name=nginx state=started
        sudo: yes
&lt;/pre&gt;
&lt;p&gt;Теперь до установки &lt;em&gt;nginx&lt;/em&gt; &lt;em&gt;Ubuntu&lt;/em&gt; на обслуживаемых серверах из &lt;em&gt;Inventory&lt;/em&gt; будет обновлена.
Стоит и установку &lt;em&gt;nginx&lt;/em&gt; (~/ansible/playbooks/tasks/&lt;strong&gt;pkg_nginx_install.yml&lt;/strong&gt;)
вынести в отдельную задачу, если часто устанавливаете &lt;em&gt;nginx&lt;/em&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
---
# Install NGINX package
    - name: Install nginx package
        apt: name=nginx update_cache=yes
        sudo: yes

    - name: Starting nginx service
        service: name=nginx state=started
        sudo: yes
&lt;/pre&gt;
&lt;p&gt;В результате наш playbook станет совсем простым:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
---
    - hosts: experiments
        remote_user: root
        tasks:

        - include: tasks/os_update.yml
        - include: tasks/pkg_nginx_install.yml
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id29"&gt;&lt;strong&gt;Список источников&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Официальная документация по &lt;a class="reference external" href="http://docs.ansible.com/ansible/index.html"&gt;Ansible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://habrahabr.ru/company/selectel/blog/196620/"&gt;Система управления Ansible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://habrahabr.ru/company/express42/blog/254959/"&gt;Ansible - давайте попробуем&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://habrahabr.ru/post/195048/"&gt;Администрирование Ansible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://habrahabr.ru/company/infobox/blog/249143/"&gt;Автоматизируем и ускоряем процесс настройки облачных серверов с Ansible. Часть 1: Введение&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://habrahabr.ru/company/infobox/blog/250115/"&gt;Автоматизируем и ускоряем процесс настройки облачных серверов с Ansible. Часть 2: вывод, отладка, и повторное использование playbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://habrahabr.ru/company/infobox/blog/252461/"&gt;Автоматизируем и ускоряем процесс настройки облачных серверов с Ansible. Часть 5: local_action, условия, циклы и роли&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="ansible"></category><category term="python"></category><category term="linux"></category></entry><entry><title>Ansible Introduction. Part 1</title><link href="https://kutsevol.github.io/2017/02/10/ansible_intro" rel="alternate"></link><published>2017-02-10T00:00:00+02:00</published><updated>2017-02-20T00:00:00+02:00</updated><author><name>Artur K.</name></author><id>tag:kutsevol.github.io,2017-02-10:/2017/02/10/ansible_intro</id><summary type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="Ansible" src="/images/ansible-header.jpg" style="width: 499.20000000000005px; height: 242.45000000000002px;" /&gt;
&lt;/div&gt;
&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;&lt;strong&gt;Содержание&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id2" id="id19"&gt;&lt;strong&gt;Введение&lt;/strong&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id3" id="id20"&gt;&lt;strong&gt;Основные задачи&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#ansible" id="id21"&gt;&lt;strong&gt;Плюсы Ansible&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id4" id="id22"&gt;&lt;strong&gt;Установка&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id6" id="id23"&gt;&lt;strong&gt;Как работает Ansible&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id7" id="id24"&gt;&lt;strong&gt;Настройка Ansible&lt;/strong&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id8" id="id25"&gt;&lt;strong&gt;Настройка через переменные окружения&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id9" id="id26"&gt;&lt;strong&gt;Создание конфигурационного файла&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#ansible-cfg" id="id27"&gt;&lt;strong&gt;Настройка ansible.cfg&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#host-inventory" id="id28"&gt;&lt;strong&gt;Файл host inventory&lt;/strong&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#inventory" id="id29"&gt;&lt;strong&gt;Переменные в inventory–файле&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id11" id="id30"&gt;&lt;strong&gt;Переменные в отдельном файле для inventory&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id12" id="id31"&gt;&lt;strong&gt;Факты&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id13" id="id32"&gt;&lt;strong&gt;Примеры простых задач&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id14" id="id33"&gt;&lt;strong&gt;Список источников&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id19"&gt;&lt;strong&gt;Введение&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Ansible&lt;/strong&gt; - система управления конфигурациями, написанная на Python, с …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="Ansible" src="/images/ansible-header.jpg" style="width: 499.20000000000005px; height: 242.45000000000002px;" /&gt;
&lt;/div&gt;
&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;&lt;strong&gt;Содержание&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id2" id="id19"&gt;&lt;strong&gt;Введение&lt;/strong&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id3" id="id20"&gt;&lt;strong&gt;Основные задачи&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#ansible" id="id21"&gt;&lt;strong&gt;Плюсы Ansible&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id4" id="id22"&gt;&lt;strong&gt;Установка&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id6" id="id23"&gt;&lt;strong&gt;Как работает Ansible&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id7" id="id24"&gt;&lt;strong&gt;Настройка Ansible&lt;/strong&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id8" id="id25"&gt;&lt;strong&gt;Настройка через переменные окружения&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id9" id="id26"&gt;&lt;strong&gt;Создание конфигурационного файла&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#ansible-cfg" id="id27"&gt;&lt;strong&gt;Настройка ansible.cfg&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#host-inventory" id="id28"&gt;&lt;strong&gt;Файл host inventory&lt;/strong&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#inventory" id="id29"&gt;&lt;strong&gt;Переменные в inventory–файле&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id11" id="id30"&gt;&lt;strong&gt;Переменные в отдельном файле для inventory&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id12" id="id31"&gt;&lt;strong&gt;Факты&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id13" id="id32"&gt;&lt;strong&gt;Примеры простых задач&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id14" id="id33"&gt;&lt;strong&gt;Список источников&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id19"&gt;&lt;strong&gt;Введение&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Ansible&lt;/strong&gt; - система управления конфигурациями, написанная на Python, с
использованием декларативного языка разметки для описания конфигураций.
Используется для автоматизации настройки и развертывания программного обеспечения.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ansible&lt;/strong&gt; - берет на себя всю работу по приведению удаленных серверов в
необходимое состояние. Администратору необходимо лишь описать, как достичь
этого состояния с помощью так называемых сценариев (&lt;em&gt;playbooks&lt;/em&gt;; это аналог
рецептов Chef). Такая технология позволяет очень быстро осуществлять
переконфигурирования системы: достаточно всего лишь добавить несколько новых
строк в сценарий.&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id20"&gt;&lt;strong&gt;Основные задачи&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Основные задачи, которые решает &lt;strong&gt;Ansible&lt;/strong&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Управление конфигурациями.&lt;/strong&gt; Максимально быстрая и правильная настройка серверов до описанной конфигурации.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Провижнинг.&lt;/strong&gt; Управление процессом развертывания новых облачных серверов (например через &lt;em&gt;API&lt;/em&gt;, с помощью &lt;em&gt;Docker&lt;/em&gt; или &lt;em&gt;LXC&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Развертывание.&lt;/strong&gt; Инсталляция и обновление ваших приложений без простоя наилучшим образом.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Оркестрация.&lt;/strong&gt; Координация компонентов вашей инфраструктуры для выполнения развертываний. Например проверка, что веб-сервер отключен от балансировщика нагрузки, до апгрейда ПО на сервере.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Мониторинг и уведомления.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Логгирование.&lt;/strong&gt; Централизованный сбор логов.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="ansible"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id21"&gt;&lt;strong&gt;Плюсы Ansible&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Преимущества &lt;strong&gt;Ansible&lt;/strong&gt; по сравнению с другими аналогичными решениями (&lt;em&gt;Puppet&lt;/em&gt;,
&lt;em&gt;Chef&lt;/em&gt; и &lt;em&gt;Salt&lt;/em&gt;) заключается в следующем:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;на управляемые узлы не нужно устанавливать никакого дополнительного ПО, всё работает через &lt;em&gt;SSH&lt;/em&gt; (в случае необходимости дополнительные модули можно взять из официального репозитория);&lt;/li&gt;
&lt;li&gt;код программы, написанный на Python, очень прост; при необходимости написание дополнительных модулей не составляет особого труда;&lt;/li&gt;
&lt;li&gt;язык, на котором пишутся сценарии, также предельно прост;&lt;/li&gt;
&lt;li&gt;низкий порог вхождения: обучиться работе с &lt;strong&gt;Ansible&lt;/strong&gt; можно за очень короткое время;&lt;/li&gt;
&lt;li&gt;документация к продукту написана очень подробно и вместе с тем — просто и понятно; она регулярно обновляется;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ansible&lt;/strong&gt; работает не только в режиме &lt;em&gt;push&lt;/em&gt;, но и &lt;em&gt;pull&lt;/em&gt;, как это делают большинство систем управления (&lt;em&gt;Puppet&lt;/em&gt;, &lt;em&gt;Chef&lt;/em&gt;);&lt;/li&gt;
&lt;li&gt;имеется возможность последовательного обновления состояния узлов (&lt;em&gt;rolling update&lt;/em&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id22"&gt;&lt;strong&gt;Установка&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Требования для установки &lt;strong&gt;Ansible&lt;/strong&gt; минимальны. На машине с которой
производится управления должен быть установлен &lt;em&gt;Python&lt;/em&gt; 2.6 или выше. На
управляемых узлах должен быть установлен только &lt;em&gt;Python&lt;/em&gt; версии не ниже 2.4, но
он, как правило, по умолчанию включен в состав большинства дистрибутивов
&lt;em&gt;linux&lt;/em&gt;-систем.&lt;/p&gt;
&lt;p&gt;Так же могут потребоваться следующие модули &lt;em&gt;Python&lt;/em&gt;, устанавливаемые через &lt;em&gt;pip&lt;/em&gt;
или пакетный менеджер вашей операционной системы:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;paramiko;&lt;/li&gt;
&lt;li&gt;PyYAML;&lt;/li&gt;
&lt;li&gt;jinja2.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Установка &lt;strong&gt;Ansible&lt;/strong&gt; в &lt;strong&gt;Ubuntu&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
sudo add-apt-repository -y ppa:rquillo/ansible
sudo apt-get update
sudo apt-get install ansible -y
&lt;/pre&gt;
&lt;p&gt;Установка &lt;strong&gt;Ansible&lt;/strong&gt; в &lt;strong&gt;CentOS 7&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
sudo rpm -iUvh http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm
sudo yum -y update
sudo yum -y install ansible
&lt;/pre&gt;
&lt;p&gt;Остальные варианты и способы установки описаны в
&lt;a class="reference external" href="http://docs.ansible.com/ansible/intro_installation.html"&gt;документации&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id23"&gt;&lt;strong&gt;Как работает Ansible&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Основная идея - наличие одного или нескольких управляющих серверов, из которых
можно отправлять команды или наборы последовательных инструкций (&lt;em&gt;playbooks&lt;/em&gt;) на
удаленные сервера, подключаясь к ним по &lt;em&gt;SSH&lt;/em&gt;.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Ansible Architecture" src="/images/ansible-architecture.jpg" style="width: 850.0px; height: 429.25px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Файл &lt;strong&gt;Host inventory&lt;/strong&gt; (инвентарный файл)содержит информацию об обсуживаемых
серверах, где команды будут исполнены. &lt;strong&gt;Файл конфигурации Ansible&lt;/strong&gt; может быть
полезен для указания настроек вашего окружения.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Наборы инструкций (playbooks)&lt;/strong&gt; состоят из одной или более задач, которые
описываются с помощью функциональности модуля ядра &lt;strong&gt;Ansible&lt;/strong&gt; или сторонних
модулей, которые могут потребоваться в специфических ситуациях. Сами по себе
наборы инструкций - последовательные наборы команды, в которых могут быть
проверки условий: если условие не выполняется, определенные команды могут
пропускаться.&lt;/p&gt;
&lt;p&gt;Так же можно использовать &lt;strong&gt;Ansible API&lt;/strong&gt; для запуска скриптов. Если
скрипту-обертке (wrapper) может потребоваться запуск &lt;em&gt;playbook&lt;/em&gt;, это можно сделать
через &lt;em&gt;API&lt;/em&gt;. Сами &lt;em&gt;playbooks&lt;/em&gt; описываются декларативно в формате &lt;em&gt;YAML&lt;/em&gt;. &lt;strong&gt;Ansible&lt;/strong&gt;
поддерживает сценарии развертывания новых облачных серверов и конфигурирования
их на основании ролей. Часть работы может быть проведена в локальном режиме на
управляющем сервере, а остальная - на созданном сервере после его первой загрузки.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id24"&gt;&lt;strong&gt;Настройка Ansible&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Файл конфигурации описывается в &lt;em&gt;INI&lt;/em&gt;-формате. Можно переопределить часть или всю
конфигурацию в параметрах &lt;em&gt;playbook&lt;/em&gt; или переменные окружения.
При исполнении команд &lt;strong&gt;Ansible&lt;/strong&gt; проверяет наличие файла конфигурации в следующих расположениях:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Проверяется переменная окружения ANSIBLE_CONFIG, которая может указывать на файл конфигурации.&lt;/li&gt;
&lt;li&gt;./ansible.cfg - в текущей директории&lt;/li&gt;
&lt;li&gt;~/.ansible.cfg - в домашней директории&lt;/li&gt;
&lt;li&gt;/etc/ansible/ansible.cfg&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id25"&gt;&lt;strong&gt;Настройка через переменные окружения&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Большинство параметров конфигурации можно устанавливать через переменные
окружения, используя префикс &lt;strong&gt;ANSIBLE_&lt;/strong&gt; перед названием параметра конфигурации
(большими буквами).&lt;/p&gt;
&lt;p&gt;Например,
&lt;em&gt;export ANSIBLE_SUDO_USER=root&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;После этого переменная &lt;em&gt;ANSIBLE_SUDO_USER&lt;/em&gt; может использована в &lt;em&gt;playbook&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id26"&gt;&lt;strong&gt;Создание конфигурационного файла&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Создаем директорию, для примера - &lt;em&gt;ansible&lt;/em&gt; и переходим в неё:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
mkdir ~/ansible
cd ~/ansible
&lt;/pre&gt;
&lt;p&gt;Также создаем папку для хранения модулей &lt;strong&gt;Ansible&lt;/strong&gt; и папку для хранения логов:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
mkdir ~/ansible/modules
mkdir ~/ansible/logs
&lt;/pre&gt;
&lt;p&gt;Создаем файл &lt;em&gt;ansible.cfg&lt;/em&gt; со следующим содержимым:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
[defaults]
hostfile = ~/ansible/inventory
sudo_user = root
log_path = ~/ansible/logs/ansible.log
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="ansible-cfg"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id27"&gt;&lt;strong&gt;Настройка ansible.cfg&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Параметров конфигурации Ansible &lt;a class="reference external" href="http://docs.ansible.com/ansible/intro_configuration.html"&gt;множество&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Некоторые из них:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;hostfile:&lt;/strong&gt; Параметр указывает на путь к &lt;strong&gt;inventory file&lt;/strong&gt;, в котором содержится список адресов хостов, к которым &lt;strong&gt;Ansible&lt;/strong&gt; может подключиться. Например: &lt;strong&gt;hostfile = /etc/ansible/hosts&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;library:&lt;/strong&gt; Путь к директории, где хранятся модули Ansible. Например: &lt;strong&gt;library = /usr/share/ansible&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;forks:&lt;/strong&gt; Количество процессов, которые может породить Ansible. По-умолчанию установлено 5 процессов. Например: &lt;strong&gt;forks = 5&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sudo_user:&lt;/strong&gt; Пользователь по умолчанию, от которого Ansible запускает команды на удаленных серверах. Например: &lt;strong&gt;sudo_user = root&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;remote_port:&lt;/strong&gt; Порт для соединения по &lt;em&gt;SSH&lt;/em&gt; (по умолчанию 22). Например: &lt;strong&gt;remote_port = 22&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;host_key_checking:&lt;/strong&gt; Параметр позволяет отключить проверку SSH–ключа на хосте. По-умолчанию проверка выполняется. Например: &lt;strong&gt;host_key_checking = False&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;timeout:&lt;/strong&gt; Значение таймаута попытки подключения по &lt;em&gt;SSH&lt;/em&gt;. Например: &lt;strong&gt;timeout = 60&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;log_path:&lt;/strong&gt; Путь для хранения файлов логов. По-умолчанию &lt;strong&gt;Ansible&lt;/strong&gt; не хранит их совсем, но указав этот параметр можно активировать запись логов. Например: &lt;strong&gt;log_path = /var/log/ansible.log&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="host-inventory"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id28"&gt;&lt;strong&gt;Файл host inventory&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Дефолтное расположение файла - &lt;strong&gt;/etc/ansible/hosts&lt;/strong&gt;, но оно может также быть
задано параметром окружения $ANSIBLE_HOSTS или параметром -i при запуске &lt;em&gt;ansible&lt;/em&gt;
и &lt;em&gt;ansible-playbook&lt;/em&gt;. Содержимое этого файла может выглядеть, например, так (в
квадратных скобках указаны имена групп управляемых узлов, ниже перечисляются
входящие в эти группы серверы):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
[dbservers]
one.example.com
two.example.com
three.example.com

[dnsservers]
rs1.example.com ansible_ssh_port=1234 ansible_ssh_host=192.168.1.10
rs2.example.com
&lt;/pre&gt;
&lt;p&gt;Если у есть большое количество серверов, использование соглашений о наименовании
(например web001, web002 ... web00N) позволит проще указывать их в &lt;em&gt;inventory&lt;/em&gt;.
Можно использовать регулярные выражения в &lt;em&gt;inventory&lt;/em&gt; файле:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
[web]
web[001:200]
[db]
db[001:020]
[balancer]
192.168.2.[1:3]
&lt;/pre&gt;
&lt;p&gt;, где &lt;strong&gt;web[001:200]&lt;/strong&gt; будет соответствовать web 001, web002, web003, web004,
..., web199, web200 для группы web;
&lt;strong&gt;db[001:020]&lt;/strong&gt; будет соответствовать db001, db002, db003 ..., db019, db020 для
группы db;
&lt;strong&gt;192.168.2.[1:3]&lt;/strong&gt; будет соответствовать 192.168.2.1, 192.168.2.2, 192.168.2.3
для группы balancer.&lt;/p&gt;
&lt;p&gt;Помимо списка управляемых узлов, в файле &lt;em&gt;hosts&lt;/em&gt; могут быть указаны и другие
сведения, необходимые для работы: номера портов для подключения по &lt;em&gt;SSH&lt;/em&gt;, способ
подключения, пароль для подключения по &lt;em&gt;SSH&lt;/em&gt;, имя пользователя, объединения групп
и т.п.&lt;/p&gt;
&lt;p&gt;По структуре инвентарного файла: &lt;strong&gt;Ansible&lt;/strong&gt; считает группой все, чья строка в
описании начинается с '[' и заканчивается ']'. Все что под этой строчкой и до
начала следующей группы - хосты. У группы могут быть дети - другие группы, которые
перечисляются после &lt;em&gt;[название группы:children]&lt;/em&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
[WEB:children]
dbservers
dnsservers
&lt;/pre&gt;
&lt;p&gt;Во время деплоя, как правило, требуется не только установить какое-либо приложение,
но и настроить его в соответствии с определенными параметрами на основании
принадлежности к группе серверов или индивидуально. Загромождать файл hosts будет
не очень красиво, поэтому разработчики &lt;strong&gt;Ansible&lt;/strong&gt; пошли следующим путём:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;файлы с переменными групп хранятся в директории &lt;em&gt;group_vars/имя_группы&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;файлы с переменными хостов в директории &lt;em&gt;hosts_vars/имя_хоста&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;файлы с переменными роли (о них речь пойдет ниже) в директории &lt;em&gt;имя_роли/vars/имя_задачи.yml&lt;/em&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="inventory"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id29"&gt;&lt;strong&gt;Переменные в inventory–файле&lt;/strong&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Иногда может потребоваться использование специфических переменных для конкретной
группы хостов или конкретного хоста.&lt;/p&gt;
&lt;p&gt;Установка переменных для конкретных хостов:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
web001
db001 db_name=mysql
192.168.2.1 db_name=redis db_port=6380
&lt;/pre&gt;
&lt;p&gt;Установка переменных для группы хостов (web):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
[web]
web[001:010]
[db]
db[001:002]
[web:vars]
web_port=443
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id30"&gt;&lt;strong&gt;Переменные в отдельном файле для inventory&lt;/strong&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Можно создавать файлы переменных для хостов и для групп. Папки с этими файлами
должны быть в одной директории с файлом &lt;em&gt;inventory&lt;/em&gt;. Файлы переменных, относящихся
к конкретным хостам, нужно сохранять в папку &lt;em&gt;host_vars&lt;/em&gt;, относящиеся к конкретным
группам - в папку &lt;em&gt;group_vars&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Пример файла переменных для хоста web001 (~/ansible/&lt;strong&gt;host_vars&lt;/strong&gt;/web001):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
web_port_ssl=443
web_port=80
&lt;/pre&gt;
&lt;p&gt;Пример файла переменных для группы db (~/ansible/&lt;strong&gt;group_vars&lt;/strong&gt;/db):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
db_port=6380
db_name=redis
&lt;/pre&gt;
&lt;p&gt;Переменные &lt;em&gt;inventory&lt;/em&gt; следуют иерархии: переменные в глобальном файле перегружают
любые хост-переменные, групповые переменные и переменные в файле &lt;em&gt;inventory&lt;/em&gt;.
Хост-переменные перегружают групповые переменные, а в свою очередь групповые
переменные перегружают переменные файла &lt;em&gt;inventory&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Помимо пользовательских переменных можно (и даже нужно) использовать факты,
собранные &lt;strong&gt;Ansible&lt;/strong&gt; перед выполнением сценариев и отдельных задач.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id31"&gt;&lt;strong&gt;Факты&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Перед внесением изменений &lt;strong&gt;Ansible&lt;/strong&gt; подключается к управляемым узлам и
собирает информацию о них: о сетевых интерфейсах и их состоянии, об установленной
операционной системе и т.п. Он может делать это как с помощью собственного модуля,
так и с помощью инструментов &lt;em&gt;ohai&lt;/em&gt; и &lt;em&gt;facter&lt;/em&gt;, если они установлены (такая возможность
специально предусмотрена для пользователей, уже имеющих опыт работы с системами
удаленного управления конфигурациями: &lt;em&gt;ohai&lt;/em&gt; и &lt;em&gt;facter&lt;/em&gt; являются библиотеками фактов
для &lt;em&gt;Chef&lt;/em&gt; и &lt;em&gt;Puppet&lt;/em&gt;). Все эти данные потом можно использовать в сценариях и шаблонах.
Например, ip-адрес по-умолчанию можно получить, обратившись к переменной ansible_default_ipv4.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
tasks:
    - debug: msg={{ansible_default_ipv4}}
&lt;/pre&gt;
&lt;pre class="code literal-block"&gt;
$ ansible-playbook web.yml

PLAY [all] ********************************************************************

GATHERING FACTS ***************************************************************
ok: [111.111.111.111]

TASK: [debug msg=&amp;quot;{{ansible_default_ipv4}}&amp;quot;] **********************************
ok: [111.111.111.111] =&amp;gt; {
&amp;quot;msg&amp;quot;: &amp;quot;{u'macaddress': u'06:a8:07:41:47:a5', u'network': u'172.31.0.0',
u'mtu': 9001, u'alias': u'eth0', u'netmask': u'255.255.240.0',
u'address': u'172.31.7.80', u'interface': u'eth0', u'type': u'ether',
u'gateway': u'172.31.0.1'}&amp;quot;
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="id13"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id32"&gt;&lt;strong&gt;Примеры простых задач&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Общая структура использования команд выглядит вот так:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
ansible &amp;lt;pattern_goes_here&amp;gt; -m &amp;lt;module_name&amp;gt; -a &amp;lt;arguments&amp;gt;
&lt;/pre&gt;
&lt;p&gt;С помощью &lt;strong&gt;Ansible&lt;/strong&gt; можно одновременно выполнить одну задачу на целой группе
серверов. Отправим запрос на ping на серверы выбранной группы:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ ansible dnsservers -m ping

dns1.example.com | success &amp;gt;&amp;gt; {
&amp;quot;changed&amp;quot;: false,
&amp;quot;ping&amp;quot;: &amp;quot;pong&amp;quot;
}

dns2.example.com | success &amp;gt;&amp;gt; {
&amp;quot;changed&amp;quot;: false,
&amp;quot;ping&amp;quot;: &amp;quot;pong&amp;quot;
}
&lt;/pre&gt;
&lt;p&gt;Если модуль (ключ -m) не задан, то используется модуль &lt;a class="reference external" href="http://docs.ansible.com/ansible/command_module.html"&gt;command&lt;/a&gt;.
Фактически, &lt;em&gt;ansible&lt;/em&gt; можно использовать не только как систему управления конфигурацией,
но и как фреймворк для распределенного выполнения команд.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ ansible -i hosts -a &amp;quot;ls -lah&amp;quot; all
localhost | success | rc=0 &amp;gt;&amp;gt;
total 12K
drwxr-xr-x  5 brun staff  170 Apr  1 11:50 .
drwxr-xr-x 91 brun staff 3.1K Apr  1 11:37 ..
-rw-r--r--  1 brun staff  230 Apr  1 12:07 export.sh
-rw-r--r--  1 brun staff   42 Apr  3 14:48 hosts
-rw-r--r--  1 brun staff  376 Apr  1 12:49 playbook.yml
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Ansible&lt;/strong&gt; позволяет не только выполнять единичные задачи, но и писать сценарии,
которые необходимо выполнить на управляемых узлах. Рассмотрим структуру и
правила написания таких сценариев более подробно.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="id14"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id33"&gt;&lt;strong&gt;Список источников&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Официальная документация по &lt;a class="reference external" href="http://docs.ansible.com/ansible/index.html"&gt;Ansible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://habrahabr.ru/company/selectel/blog/196620/"&gt;Система управления Ansible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://habrahabr.ru/company/express42/blog/254959/"&gt;Ansible - давайте попробуем&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://habrahabr.ru/post/195048/"&gt;Администрирование Ansible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://habrahabr.ru/company/infobox/blog/249143/"&gt;Автоматизируем и ускоряем процесс настройки облачных серверов с Ansible. Часть 1: Введение&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://habrahabr.ru/company/infobox/blog/252001/"&gt;Автоматизируем и ускоряем процесс настройки облачных серверов с Ansible. Часть 3: Переменные и файл inventory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="ansible"></category><category term="python"></category><category term="linux"></category></entry><entry><title>Alias</title><link href="https://kutsevol.github.io/2017/02/09/alias" rel="alternate"></link><published>2017-02-09T00:00:00+02:00</published><updated>2017-02-09T00:00:00+02:00</updated><author><name>Artur K.</name></author><id>tag:kutsevol.github.io,2017-02-09:/2017/02/09/alias</id><summary type="html">&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;&lt;strong&gt;Содержание&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id2" id="id6"&gt;&lt;strong&gt;Введение&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#alias" id="id7"&gt;&lt;strong&gt;Как создать alias&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id3" id="id8"&gt;&lt;strong&gt;Постоянные alias&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id4" id="id9"&gt;&lt;strong&gt;Просмотр списка alias&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id5" id="id10"&gt;&lt;strong&gt;Удаление alias&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;&lt;strong&gt;Введение&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Команда &lt;strong&gt;alias&lt;/strong&gt; - это очень удобный инструмент для тех, кто часто работает в командной строке.
При правильных установках она поможет вам быстрее вводить команды, а также
исправлять опечатки. &lt;strong&gt;alias&lt;/strong&gt; - это встроенная команда оболочки, поэтому инсталлировать ее не требуется …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;&lt;strong&gt;Содержание&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id2" id="id6"&gt;&lt;strong&gt;Введение&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#alias" id="id7"&gt;&lt;strong&gt;Как создать alias&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id3" id="id8"&gt;&lt;strong&gt;Постоянные alias&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id4" id="id9"&gt;&lt;strong&gt;Просмотр списка alias&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id5" id="id10"&gt;&lt;strong&gt;Удаление alias&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;&lt;strong&gt;Введение&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Команда &lt;strong&gt;alias&lt;/strong&gt; - это очень удобный инструмент для тех, кто часто работает в командной строке.
При правильных установках она поможет вам быстрее вводить команды, а также
исправлять опечатки. &lt;strong&gt;alias&lt;/strong&gt; - это встроенная команда оболочки, поэтому инсталлировать ее не требуется.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;alias&lt;/strong&gt; используется для создания альтернативных версий обычных команд, присваивая
им новые названия, а также чтобы избежать необходимости запоминать длинные и
сложные команды. Кроме того, вы можете задать опции по умолчанию, которые
используются каждый раз при запуске команды alias.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="alias"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;&lt;strong&gt;Как создать alias&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Каждый день, как правило, используются одни и те же команды такие как &lt;em&gt;sudo aptitude update&lt;/em&gt;,
&lt;em&gt;sudo aptitude upgrade&lt;/em&gt;, &lt;em&gt;sudo aptitude install&lt;/em&gt; и т.д. С помощью &lt;em&gt;alias&lt;/em&gt; их можно заменить, например,
на - &lt;em&gt;update&lt;/em&gt;, &lt;em&gt;upgrade&lt;/em&gt; и &lt;em&gt;install&lt;/em&gt; соответственно. Как это сделать?&lt;/p&gt;
&lt;p&gt;Общая конструкция создания &lt;strong&gt;alias&lt;/strong&gt; следующая:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
alias short_name=&amp;quot;command&amp;quot;
&lt;/pre&gt;
&lt;p&gt;Где &lt;em&gt;short_name&lt;/em&gt; - название (псевдоним) которое будет использоваться после создания
&lt;strong&gt;alias&lt;/strong&gt;, a &lt;em&gt;command&lt;/em&gt; - команда, которую необходимо выполнить, например:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
alias install=&amp;quot;sudo aptitude install&amp;quot;
&lt;/pre&gt;
&lt;p&gt;Если выполнить эту команду в коммандной строке, использовать данный &lt;strong&gt;alias&lt;/strong&gt;
можно будет сразу, но! &amp;quot;время жизни&amp;quot; &lt;strong&gt;alias&lt;/strong&gt; ограничивается временем жизни
сессии в которой был выполнен этот &lt;strong&gt;alias&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;&lt;strong&gt;Постоянные alias&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Для того чтобы создаваемые &lt;strong&gt;alias&lt;/strong&gt; были доступны всегда необходимо их
включить в свой локальный файл &lt;em&gt;~/.bashrc&lt;/em&gt;. Здесь мы предпологаем, что в качестве
коммандной оболочки используется &lt;em&gt;bash&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Есть несколько способов, как включить &lt;strong&gt;alias&lt;/strong&gt; в &lt;em&gt;.bashrc&lt;/em&gt;. Каждый способ
подразумевает сделать 2 шага: добавить &lt;strong&gt;alias&lt;/strong&gt; в файл &lt;em&gt;.bashrc&lt;/em&gt; и
&lt;cite&gt;перезагрузить файл *.bashrc*&lt;/cite&gt;.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;С помощью команды echo:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code literal-block"&gt;
echo 'alias install=&amp;quot;sudo aptitude install&amp;quot;' &amp;gt;&amp;gt; ~/.bashrc

. ~/.bashrc
&lt;/pre&gt;
&lt;p&gt;. ~/.bashrc - &lt;cite&gt;перезагрузка&lt;/cite&gt; файла без выхода из системы, используется, чтобы
внесенные изменения можно было использовать в текущей сессии.&lt;/p&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Добавление &lt;strong&gt;alias&lt;/strong&gt; в ручную в &lt;em&gt;~/.bashrc&lt;/em&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code literal-block"&gt;
sudo nano ~/.bashrc
&lt;/pre&gt;
&lt;p&gt;В конце файла или в любом другом месте, добавить alias:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
alias install=&amp;quot;sudo aptitude install&amp;quot;
&lt;/pre&gt;
&lt;p&gt;Сохранить изменения и выйти из файла. Перезагрузить файл:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
. ~/.bashrc
&lt;/pre&gt;
&lt;p&gt;3. Добавление &lt;strong&gt;alias&lt;/strong&gt; в отдельный файл. Со временем к-во &lt;strong&gt;alias&lt;/strong&gt; может
быстро разростаться и искать их в файле &lt;em&gt;~/.bashrc&lt;/em&gt; станет довольно трудно,
поэтому все &lt;strong&gt;alias&lt;/strong&gt; можно вынести в отдельный файл, например, &lt;em&gt;~/.bash_aliases&lt;/em&gt;
(по умолчанию не существует).&lt;/p&gt;
&lt;p&gt;Создаем файл:&lt;/p&gt;
&lt;p&gt;..code:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
touch ~/.bash_aliases
&lt;/pre&gt;
&lt;p&gt;Открываем на редактирование:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
sudo nano ~/.bash_aliases
&lt;/pre&gt;
&lt;p&gt;Добавить все &lt;strong&gt;alias&lt;/strong&gt; в файл &lt;em&gt;~/.bash_aliases&lt;/em&gt;, сохранить и выйти из файла.&lt;/p&gt;
&lt;p&gt;В файле ~/.bashrc дописываем (раскомментируем) следующий код, чтобы все &lt;strong&gt;alias&lt;/strong&gt;
были доступны системе:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
if [ -f ~/.bash_aliases ]; then
. ~/.bash_aliases
fi
&lt;/pre&gt;
&lt;p&gt;&lt;cite&gt;Перезагружаем&lt;/cite&gt; файл:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
. ~/.bashrc
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;&lt;strong&gt;Просмотр списка alias&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Чтобы посмотреть список всех доступных &lt;strong&gt;alias&lt;/strong&gt;, просто выполните команду
&lt;em&gt;alias&lt;/em&gt; без аргументов (в некоторых системах используется опция -p)&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ alias
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias grep='grep --color=auto'
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;&lt;strong&gt;Удаление alias&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Если &lt;strong&gt;alias&lt;/strong&gt; больше не нужен, можно удалить его из системы, используя команды
&lt;em&gt;unalias&lt;/em&gt;. В качестве аргумента вставьте имя алиаса, который хотите удалить.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ alias | grep ls
alias ls='ls -l'
$ unalias ls
$ alias | grep ls
$
&lt;/pre&gt;
&lt;p&gt;Если вы определили свой &lt;strong&gt;alias&lt;/strong&gt; в файле &lt;em&gt;~/.bashrc&lt;/em&gt;, также необходимо удалить
определение &lt;strong&gt;alias&lt;/strong&gt;, иначе он снова будет определен после старта сеанса
командной оболочки или перезагрузки компьютера.&lt;/p&gt;
&lt;/div&gt;
</content><category term="linux"></category></entry><entry><title>Virtualenv in Python</title><link href="https://kutsevol.github.io/2017/01/23/virtualenv" rel="alternate"></link><published>2017-01-23T00:00:00+02:00</published><updated>2017-02-14T00:00:00+02:00</updated><author><name>Artur K.</name></author><id>tag:kutsevol.github.io,2017-01-23:/2017/01/23/virtualenv</id><summary type="html">&lt;div class="figure align-left"&gt;
&lt;img alt="Python Virtualenv" src="/images/python-virtualenv.jpg" style="width: 262.5px; height: 140.0px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Официальная документация по &lt;a class="reference external" href="https://virtualenv.pypa.io/en/stable/"&gt;Virtualenv&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Virtualenv&lt;/strong&gt; - инструмент для создания изолированного окружения Python. Это
окружение можно использовать для проверки новых версий ваших программ, новых
версий пакетов, которые используются или просто в качестве песочницы для новых
пакетов. Кроме того, virtualenv можно использовать в качестве рабочего места в
случаях, если нет возможности копировать файлы …&lt;/p&gt;</summary><content type="html">&lt;div class="figure align-left"&gt;
&lt;img alt="Python Virtualenv" src="/images/python-virtualenv.jpg" style="width: 262.5px; height: 140.0px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Официальная документация по &lt;a class="reference external" href="https://virtualenv.pypa.io/en/stable/"&gt;Virtualenv&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Virtualenv&lt;/strong&gt; - инструмент для создания изолированного окружения Python. Это
окружение можно использовать для проверки новых версий ваших программ, новых
версий пакетов, которые используются или просто в качестве песочницы для новых
пакетов. Кроме того, virtualenv можно использовать в качестве рабочего места в
случаях, если нет возможности копировать файлы в site-packages по какой-либо
причине.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Virtualenv&lt;/strong&gt; решает ряд проблем:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Создание новой изолированной среды для проекта Python;&lt;/li&gt;
&lt;li&gt;Возможность загрузки пакетов без привилегий  admin/sudo;&lt;/li&gt;
&lt;li&gt;Простая и быстрая упаковка приложения;&lt;/li&gt;
&lt;li&gt;Создание списка зависимостей одного проекта (с помощью pip);&lt;/li&gt;
&lt;li&gt;Быстрое восстановление зависимостей с помощью файла требований (с помощью pip);&lt;/li&gt;
&lt;li&gt;Портативность между системами.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;Установка&lt;/h2&gt;
&lt;p&gt;Предварительно необходимо установить &lt;em&gt;pip&lt;/em&gt; и &lt;em&gt;setuptools&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Для &lt;strong&gt;python 3&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
sudo aptitude install python3-pip python3-setuptools
&lt;/pre&gt;
&lt;p&gt;Для &lt;strong&gt;python 2&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
sudo aptitude install python-pip python-setuptools
&lt;/pre&gt;
&lt;p&gt;Далее отличия будут только в pip. Для &lt;strong&gt;python 3&lt;/strong&gt; - &lt;em&gt;pip3&lt;/em&gt;, для &lt;strong&gt;python 2&lt;/strong&gt; - &lt;em&gt;pip&lt;/em&gt;.
Далее рассмотрим на примере &lt;em&gt;pip3&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Установка &lt;em&gt;virtualenv&lt;/em&gt;:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
sudo pip3 install virtualenv
&lt;/pre&gt;
&lt;p&gt;Для большего комфорта работы с &lt;em&gt;virtualenv&lt;/em&gt; создано расширение, которое делает все
манипуляции с окруженем еще проще. Установка &lt;em&gt;virtualenvwrapper&lt;/em&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
sudo pip3 install virtualenvwrapper
&lt;/pre&gt;
&lt;p&gt;В &lt;em&gt;~/.bashrc&lt;/em&gt; дописываем:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
source /usr/local/bin/virtualenvwrapper.sh
&lt;/pre&gt;
&lt;p&gt;Создаем новое окружение:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
mkvirtualenv env-name
&lt;/pre&gt;
&lt;p&gt;Просмотреть список окружений:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
workon
&lt;/pre&gt;
&lt;p&gt;Поменять окружение:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
workon env-name
&lt;/pre&gt;
&lt;p&gt;Выход из окружения:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
deactivate
&lt;/pre&gt;
&lt;p&gt;Удалить окружение:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
rmvirtualenv env-name
&lt;/pre&gt;
&lt;p&gt;Находясь в одном из окружений, можно ставить пакеты через pip, как обычно.
Для примера выбран пакет - &lt;em&gt;flask&lt;/em&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
pip3 install flask
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Requirements.txt&lt;/em&gt; - файл с описанием зависимостей, позволяет установить все
необходимые зависимости за один раз вот таким образом:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
pip3 install -r requirements.txt
&lt;/pre&gt;
&lt;p&gt;Создать такой файл можно следующим образом:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
pip3 freeze &amp;gt; requirements.txt
&lt;/pre&gt;
&lt;p&gt;Список источников:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://eax.me/python-virtualenv/"&gt;Памятка по virtualenv и изолированным проектам на Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://proft.me/2010/04/3/python-i-okruzhenie-virtualenv/"&gt;Python и окружение virtualenv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="virtualenv"></category><category term="python"></category></entry></feed>